Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(revision bdbd1214c18a529618f7612316ef666bd927cb9d)
+++ b/.gitignore	(revision bdbd1214c18a529618f7612316ef666bd927cb9d)
@@ -0,0 +1,2 @@
+# Project exclude paths
+/out/
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(revision bdbd1214c18a529618f7612316ef666bd927cb9d)
+++ b/.idea/.gitignore	(revision bdbd1214c18a529618f7612316ef666bd927cb9d)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(revision bdbd1214c18a529618f7612316ef666bd927cb9d)
+++ b/.idea/misc.xml	(revision bdbd1214c18a529618f7612316ef666bd927cb9d)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(revision bdbd1214c18a529618f7612316ef666bd927cb9d)
+++ b/.idea/modules.xml	(revision bdbd1214c18a529618f7612316ef666bd927cb9d)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/dataStructure.iml" filepath="$PROJECT_DIR$/dataStructure.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(revision fbef5f6c39fb4b698830d8020c5b0ebe9a9fb71f)
+++ b/.idea/vcs.xml	(revision fbef5f6c39fb4b698830d8020c5b0ebe9a9fb71f)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: Searching/BinarySearch/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Searching/BinarySearch/Main.java b/Searching/BinarySearch/Main.java
new file mode 100644
--- /dev/null	(revision bdbd1214c18a529618f7612316ef666bd927cb9d)
+++ b/Searching/BinarySearch/Main.java	(revision bdbd1214c18a529618f7612316ef666bd927cb9d)
@@ -0,0 +1,68 @@
+package com.dataStructure.Searching.BinarySearch;
+
+import java.util.Collections;
+import java.util.List;
+
+public class Main {
+    public static void main(String[] args) {
+
+        int[] numbers={1,3,4,5,6,7,8,9,10};
+        System.out.println("Position of that number: " +binarySearch(numbers,6));
+
+    }
+
+    public static Integer binarySearch(int[] input, int target) {
+
+        int first = 0;
+        int last = input.length - 1;
+
+        while (first <= last) {
+            int mid = (first + last) / 2;
+
+            if (input[mid] == target) {
+
+                return  mid;
+            } else if (input[mid] < target) {
+                first = mid + 1;
+            } else {
+                last = mid - 1;
+            }
+        }
+        return null;
+    }
+
+    /*public static int recursiveBinarySearch(int[] input, int target, int start, int end){
+        if(start>=end){
+            return -1;
+        } else{
+            int mid = start + (end -start)/2;
+
+            if(target < input[mid]){
+                return recursiveBinarySearch(input, target, start, mid -1);
+            } else if (target> input[mid]) {
+                return recursiveBinarySearch(input, target, mid+1, end);
+            } else {
+                return mid;
+            }
+        }
+    }*/
+
+    public static int recursiveBinarySearch(List<Integer> numbers, int target){
+        int a = 0;
+        if (numbers.size() ==0){
+            return 0;
+        }
+            int mid = (numbers.size())/2;
+
+            if (numbers.get(mid) < target){
+                return recursiveBinarySearch(Collections.singletonList(numbers.get(mid - 1)), target);
+            } else if (numbers.get(mid)> target) {
+                return recursiveBinarySearch(Collections.singletonList(numbers.get(mid +1)), target);
+            } else if (numbers.get(mid) == target){
+                a = numbers.get(mid);
+                return a ;
+
+            }
+     return a;
+    }
+}
Index: Searching/LinearSearch/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Searching/LinearSearch/Main.java b/Searching/LinearSearch/Main.java
new file mode 100644
--- /dev/null	(revision bdbd1214c18a529618f7612316ef666bd927cb9d)
+++ b/Searching/LinearSearch/Main.java	(revision bdbd1214c18a529618f7612316ef666bd927cb9d)
@@ -0,0 +1,19 @@
+package com.dataStructure.Searching.LinearSearch;
+
+public class Main {
+    public static void main(String[] args) {
+       int[] numbers= {1,2,3,4,5,6};
+        System.out.println(linearSearch(numbers, 2));
+    }
+
+    public static int linearSearch(int[] data, int key){
+        for (int i = 0; i <data.length ; i++) {
+            if (data[i] == key){
+                return i;
+            }
+        }
+
+        return -1;
+
+    }
+}
Index: Sorting/insertionsort/InsertionSort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/insertionsort/InsertionSort.java b/Sorting/insertionsort/InsertionSort.java
new file mode 100644
--- /dev/null	(revision cd0bfc92b86ca1ac2a05d2256e05fe50dcbe68ed)
+++ b/Sorting/insertionsort/InsertionSort.java	(revision cd0bfc92b86ca1ac2a05d2256e05fe50dcbe68ed)
@@ -0,0 +1,177 @@
+package com.dataStructure.Sorting.insertionsort;
+
+public class InsertionSort {
+
+
+    /**
+     * Sort the array in-place in non-decreasing order.
+     *
+     * @param array the array to be insertionSorted.
+     */
+ /*   public void insertionSort(int[] array) {
+
+        int n = array.length;
+        for (int i = 1; i < n; i++) {
+            int key = array[i];
+            int j = i - 1;
+
+            while (j >= 0 && array[j] > key) {
+                array[j + 1] = array[j];
+                j = j - 1;
+            }
+            array[j + 1] = key;
+        }
+    }*/
+
+    /*public void insertionSort(int[] arr) {
+        // It should be known numbers. And almost ordered numbers and small set of numbers.
+        int arrayLength = arr.length;
+        // for loop need to be start second value for comparison with first value.
+        for (int i = 1; i < arrayLength; i++) {
+            // All assigned value will go a memory.
+            int store = arr[i];
+
+            // We prepared previous number to check second and first number.
+            int previousNumber = i - 1;
+
+            // IF
+            // Previous number should be 0 or greater than 0.
+            // And inside of array which represent previous number should be greater than store.
+            // Then work while loop inside.
+
+            while (previousNumber >= 0 && arr[previousNumber] > store) {
+
+                // previous number should be insertionSorted by small to big.
+                // Instance :
+                // Example case: {5,1,3,6}--->
+                // After sort of element ---> {1,3,5,6}
+                // **
+                // **
+                arr[previousNumber + 1] = arr[previousNumber];
+
+                // Decrease the previous number
+                previousNumber = previousNumber - 1;
+
+            }
+            // For next step. Assign the store to next iterable number of array.
+            arr[previousNumber + 1] = store;
+        }
+    }*/
+   /* public void insort(int[] array) {
+        for (int i = 1; i < array.length; i++) {
+            int temp = array[i];
+            int j = i - 1;
+
+            while (j >= 0 && array[j] > temp) {
+                array[j + 1] = array[j];
+                j--;
+            }
+
+            array[j + 1] = temp;
+        }
+
+    }*/
+    /*
+    public void insertionSorted(int[] array) {
+        int temp;
+
+        for (int i = 1; i < array.length; i++) {
+            temp = array[i];
+            int j = i - 1;
+            while (j >= 0 && array[j] > temp) {
+                array[j + 1] = array[j];
+                j--;
+            }
+            array[j + 1] = temp;
+        }
+
+    }*/
+
+   /* public void sort(int[] array){
+        int temp;
+
+        for (int i = 1; i < array.length; i++) {
+            temp = array[i]; // Array of element is copying of temp.
+            int j = i-1; // Get ready to start of position of array.
+
+            while (j >=0 && array[j] > temp){ // Rules of insertion sort!
+                array[j+1] = array[j];  // Shifting next right of the array. Because array[j] is greater than temp number.
+                j--; // get previous location
+            }
+            array[j + 1] = temp;  // And here we are going to put the temp array in a list if it is less than array[j] otherwise.
+                                  // The process will be spontaneously to continue.
+        }
+    }*/
+    public void insertionSort(int[] array) {
+        int temp;
+        for (int i = 1; i < array.length; i++) {
+            temp = array[i];
+            int j = i - 1;
+
+
+            while (j >= 0 && array[j] < temp) {
+                array[j + 1] = array[j];
+                j = j - 1;
+            }
+
+            array[j + 1] = temp;
+        }
+
+    }
+
+  /*  public int sumArray(int[] arr) {
+        int sum = 0;
+
+        for (int i = 0; i < arr.length; i++) {
+            sum = sum + arr[i];
+        }
+        return sum;
+    }
+
+
+   *//* LINEAR-SEARCH(A, v)
+    for i = 1 to A.length
+       if A[i] == v
+            return i
+    return NIL*//*
+
+
+    public int linearSearch(int[] a, int v){
+        for (int i = 0; i < a.length; i++) {
+            if (a[i] == v){
+                return i;
+            }
+        }
+        return 0;
+    }
+
+
+
+    *//*
+
+    ADD-BINARY(A, B)
+    carry = 0
+    for i = 1 to A.length
+        sum = A[i] + B[i] + carry
+        C[i] = sum % 2  // remainder
+        carry = sum / 2 // quotient
+    C[A.length + 1] = carry
+    return C
+
+     *//*
+    public int[] addBinary(int[] a, int[] b){
+
+        int carry = 0;
+        int n = a.length;
+        int[] c = new int[n+1];
+
+        for (int i = n-1; i >=0 ; i--) {
+            int sum = a[i] + b[i] + carry;
+            c[i+1] = sum %2;
+            carry = sum / 2;
+        }
+        c[0] = carry;
+        return c;
+    }
+*/
+}
Index: Sorting/insertionsort/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/insertionsort/Main.java b/Sorting/insertionsort/Main.java
new file mode 100644
--- /dev/null	(revision cd0bfc92b86ca1ac2a05d2256e05fe50dcbe68ed)
+++ b/Sorting/insertionsort/Main.java	(revision cd0bfc92b86ca1ac2a05d2256e05fe50dcbe68ed)
@@ -0,0 +1,62 @@
+package com.dataStructure.Sorting.insertionsort;
+
+import java.util.Random;
+
+public class Main {
+    public static void main(String[] args) {
+       /* InsertionSort ins = new InsertionSort();
+
+        int[] arr = {3,5,2,8,1,4};
+
+        int[] arr2={31,41,59,26,41,58};
+
+        int[] a = {1,0,1,0};
+        int[] b = {1,1,0,1};
+
+       // ins.insertionSort(arr);
+       // ins.insort(arr);
+       // ins.sort(arr);
+        ins.insertionSort(arr2);
+
+*/
+        // Result of two binary numbers!
+     /*   System.out.println(Arrays.toString(ins.addBinary(a, b)));
+
+
+        System.out.println(ins.sumArray(arr2));
+        for (int i = 0; i < arr2.length ; i++) {
+            System.out.print(arr2[i] + " ");
+        }*/
+        // Best case scenario is good O(1). depends on the input number.
+        // Worst case scenario is absolutely terrible. Could be n*n .
+       /* for (int size = 10; size < 100_000_000; size *= 2) {
+            testTimeForSize(size);
+        }*/
+
+   }//
+
+
+    public static void testTimeForSize(int size) {
+
+        InsertionSort sort = new InsertionSort();
+        int[] a = generateRandomIntArray(size);
+
+        long start = System.currentTimeMillis();
+        // sort.insertionSort(a);
+       // Arrays.sort(a);
+        long end = System.currentTimeMillis();
+
+        System.out.println("Time elapsed:( " + size + " ) " + (end - start) / 1000.0F);
+    }
+
+    public static int[] generateRandomIntArray(int size) {
+        int[] a = new int[size];
+        Random random = new Random();
+        for (int i = 0; i < size; i++) {
+            a[i] = random.nextInt();
+
+
+        }
+        return a;
+    }
+}
Index: Sorting/insertionsort/test_result.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/insertionsort/test_result.txt b/Sorting/insertionsort/test_result.txt
new file mode 100644
--- /dev/null	(revision bdbd1214c18a529618f7612316ef666bd927cb9d)
+++ b/Sorting/insertionsort/test_result.txt	(revision bdbd1214c18a529618f7612316ef666bd927cb9d)
@@ -0,0 +1,49 @@
+Insertion Sort
+
+Time elapsed:( 10 ) 0.0
+Time elapsed:( 20 ) 0.0
+Time elapsed:( 40 ) 0.0
+Time elapsed:( 80 ) 0.0
+Time elapsed:( 160 ) 0.001
+Time elapsed:( 320 ) 0.0
+Time elapsed:( 640 ) 0.001
+Time elapsed:( 1280 ) 0.001
+Time elapsed:( 2560 ) 0.002
+Time elapsed:( 5120 ) 0.004
+Time elapsed:( 10240 ) 0.018
+Time elapsed:( 20480 ) 0.024
+Time elapsed:( 40960 ) 0.09
+Time elapsed:( 81920 ) 0.372
+Time elapsed:( 163840 ) 1.405
+Time elapsed:( 327680 ) 5.32
+Time elapsed:( 655360 ) 21.991
+Time elapsed:( 1310720 ) 92.965
+
+
+Arrays Sort( Java default libs)
+
+Time elapsed:( 10 ) 0.001
+Time elapsed:( 20 ) 0.0
+Time elapsed:( 40 ) 0.0
+Time elapsed:( 80 ) 0.001
+Time elapsed:( 160 ) 0.0
+Time elapsed:( 320 ) 0.0
+Time elapsed:( 640 ) 0.0
+Time elapsed:( 1280 ) 0.0
+Time elapsed:( 2560 ) 0.001
+Time elapsed:( 5120 ) 0.001
+Time elapsed:( 10240 ) 0.001
+Time elapsed:( 20480 ) 0.003
+Time elapsed:( 40960 ) 0.003
+Time elapsed:( 81920 ) 0.006
+Time elapsed:( 163840 ) 0.011
+Time elapsed:( 327680 ) 0.021
+Time elapsed:( 655360 ) 0.034
+Time elapsed:( 1310720 ) 0.072
+Time elapsed:( 2621440 ) 0.148
+Time elapsed:( 5242880 ) 0.316
+Time elapsed:( 10485760 ) 0.646
+Time elapsed:( 20971520 ) 1.298
+Time elapsed:( 41943040 ) 2.735
+Time elapsed:( 83886080 ) 5.547
+
Index: Sorting/mergeSort/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/mergeSort/Main.java b/Sorting/mergeSort/Main.java
new file mode 100644
--- /dev/null	(revision cd0bfc92b86ca1ac2a05d2256e05fe50dcbe68ed)
+++ b/Sorting/mergeSort/Main.java	(revision cd0bfc92b86ca1ac2a05d2256e05fe50dcbe68ed)
@@ -0,0 +1,42 @@
+package com.dataStructure.Sorting.mergeSort;
+
+import java.util.Arrays;
+import java.util.Random;
+
+public class Main {
+    public static void main(String[] args) {
+       /* int[] a = {5,7,4,Integer.MAX_VALUE,2,8,Integer.MAX_VALUE,24,-100,617,41,Integer.MIN_VALUE};
+        MergeSort.sort(a);
+
+        for (int i = 0; i < a.length; i++) {
+            System.out.println(a[i]);
+        }*/
+        for (int size = 10; size < 1_000_000; size *=2) {
+            testTimeForSize(size);
+        }
+    }
+    public static void testTimeForSize(int size){
+        int[] a = generateRandomIntArray(size);
+
+        long start = System.currentTimeMillis();
+
+        //MergeSort.sort(a);
+        //MergeSort.insertionSort(a);
+        Arrays.sort(a);
+        long end = System.currentTimeMillis();
+
+        System.out.println("Time elapsed("+ size +" ):" + (end - start) / 1000.0F);
+    }
+
+    public static int[] generateRandomIntArray(int size){
+        int[] a = new int[size];
+
+        Random random = new Random();
+
+        for (int i = 0; i <size ; i++) {
+            a[i] = random.nextInt();
+        }
+        return a;
+    }
+
+}
Index: Sorting/mergeSort/MergeSort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/mergeSort/MergeSort.java b/Sorting/mergeSort/MergeSort.java
new file mode 100644
--- /dev/null	(revision cd0bfc92b86ca1ac2a05d2256e05fe50dcbe68ed)
+++ b/Sorting/mergeSort/MergeSort.java	(revision cd0bfc92b86ca1ac2a05d2256e05fe50dcbe68ed)
@@ -0,0 +1,107 @@
+package com.dataStructure.Sorting.mergeSort;
+
+public class MergeSort {
+
+
+    /*
+     *
+     * Sorts the array in-place in non-decreasing order.
+     * @param a the array to be insertionSorted
+     * */
+
+    /*public static void sort(int[] a) {
+        mergeSort(a,0, a.length - 1); // Olan iki tane index in arasinda yapacagindan length den 1 eksik olucak.
+    }
+
+    public static void mergeSort(int[] a, int p, int r) {
+        if (p < r) {
+            int q = (p + r) / 2;
+
+            mergeSort(a, p, q);
+            mergeSort(a, q + 1, r);
+            merge(a, p, q, r);
+        }
+    }
+
+
+    /// Iki tane alt diziyi merge edecek seyi yazdik.
+    public static void merge(int[] a, int p, int q, int r) {
+        int n1 = q - p + 1;
+        int n2 = r - q;
+
+        int[] L = new int[n1 + 1];
+        int[] R = new int[n2 + 1];
+        for (int i = 0; i < n1; i++) {
+            L[i] = a[p + i];
+        }
+        for (int j = 0; j < n2; j++) {
+            R[j] = a[q + 1 + j];
+        }
+        L[n1] = Integer.MAX_VALUE; // sonsuza atandi. 2 ^31 -1 . sonsuza tek benzeyen sey budur.
+        R[n2] = Integer.MAX_VALUE;
+        int i = 0;
+        int j = 0;
+        for (int k = p; k <= r; k++) {
+            if (L[i] <= R[j]) {
+                a[k] = L[i];
+                i++;
+            } else {
+                a[k] = R[j];
+                j++;
+            }
+        }
+    }*/
+
+    /*
+     *
+     * Sorts the array in-place in non-decreasing order.
+     * @param a the array to be insertionSorted
+     * */
+
+    public static void sorted(int[] a) {
+        eSort(a, 0, a.length - 1);
+    }
+
+
+    private static void eSort(int[] a, int p, int r) {
+        if (p < r) {
+            int q = (p + r) / 2;
+
+            eSort(a, p, q);
+            eSort(a, q + 1, r);
+            merge(a, p, q, r);
+        }
+    }
+
+    private static void merge(int[] a, int p, int q, int r) {
+        int n1 = q - p + 1;
+        int n2 = r - q;
+
+        int[] L = new int[n1 + 1];
+        int[] R = new int[n2 + 1];
+
+        for (int i = 0; i < n1; i++) {
+            L[i] = a[p + i];
+        }
+
+        for (int j = 0; j < n2; j++) {
+            R[j] = a[q + 1 + j];
+        }
+
+        L[n1] = Integer.MAX_VALUE;
+        R[n2] = Integer.MAX_VALUE;
+
+        int i = 0;
+        int j = 0;
+
+        for (int k = p; k <= r; k++) {
+            if (L[i] <= R[j]) {
+                a[k] = L[i];
+                i = i + 1;
+            } else {
+                a[k] = R[j];
+                j = j + 1;
+            }
+        }
+    }
+}
Index: Sorting/mergeSort/test_result.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/mergeSort/test_result.txt b/Sorting/mergeSort/test_result.txt
new file mode 100644
--- /dev/null	(revision fbef5f6c39fb4b698830d8020c5b0ebe9a9fb71f)
+++ b/Sorting/mergeSort/test_result.txt	(revision fbef5f6c39fb4b698830d8020c5b0ebe9a9fb71f)
@@ -0,0 +1,43 @@
+ MERGE SORT
+Time elapsed(10 ):0.0
+Time elapsed(20 ):0.0
+Time elapsed(40 ):0.0
+Time elapsed(80 ):0.0
+Time elapsed(160 ):0.0
+Time elapsed(320 ):0.001
+Time elapsed(640 ):0.0
+Time elapsed(1280 ):0.0
+Time elapsed(2560 ):0.0
+Time elapsed(5120 ):0.002
+Time elapsed(10240 ):0.001
+Time elapsed(20480 ):0.003
+Time elapsed(40960 ):0.005
+Time elapsed(81920 ):0.01
+Time elapsed(163840 ):0.018
+Time elapsed(327680 ):0.031
+Time elapsed(655360 ):0.071
+
+Array Sorted(Java):
+
+Time elapsed(10 ):0.002
+Time elapsed(20 ):0.0
+Time elapsed(40 ):0.0
+Time elapsed(80 ):0.001
+Time elapsed(160 ):0.001
+Time elapsed(320 ):0.0
+Time elapsed(640 ):0.0
+Time elapsed(1280 ):0.001
+Time elapsed(2560 ):0.001
+Time elapsed(5120 ):0.001
+Time elapsed(10240 ):0.001
+Time elapsed(20480 ):0.002
+Time elapsed(40960 ):0.006
+Time elapsed(81920 ):0.007
+Time elapsed(163840 ):0.017
+Time elapsed(327680 ):0.026
+Time elapsed(655360 ):0.038
+
+
+Result will be better than insertion sort.
+
+Merge sort will be expensive for Space complexity.
\ No newline at end of file
Index: Sorting/mergeSort/MergeExample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/mergeSort/MergeExample.java b/Sorting/mergeSort/MergeExample.java
new file mode 100644
--- /dev/null	(revision cd0bfc92b86ca1ac2a05d2256e05fe50dcbe68ed)
+++ b/Sorting/mergeSort/MergeExample.java	(revision cd0bfc92b86ca1ac2a05d2256e05fe50dcbe68ed)
@@ -0,0 +1,91 @@
+package com.dataStructure.Sorting.mergeSort;
+
+import java.util.Random;
+
+
+
+public class MergeExample {
+    public static void main(String[] args) {
+        Random random = new Random();
+        int[] numbers = new int[10];
+
+        for (int i = 0; i < numbers.length; i++) {
+            numbers[i] = random.nextInt(1_000_000);
+        }
+
+        System.out.println("Before: ");
+        printArray(numbers);
+
+        mergeSort(numbers);
+
+        System.out.println("\nAfter: ");
+        printArray(numbers);
+    }
+
+    private static void mergeSort(int[] numbers) {
+
+        int length = numbers.length;
+
+        if (length < 2){
+            return;
+        }
+
+        int mid = length /2;
+        int[] leftHalf = new int[mid];
+        int[] rightHalf = new int[length - mid];
+
+
+        for (int i = 0; i < mid; i++) {
+            leftHalf[i] = numbers[i];
+        }
+        for (int i = mid; i < length; i++) {
+            rightHalf[i - mid] = numbers[i];
+        }
+        mergeSort(leftHalf);
+        mergeSort(rightHalf);
+
+        //Merge
+        merge(numbers, leftHalf, rightHalf);
+
+    }
+
+
+    private static void  merge(int[]numbers, int[] leftHalf, int[] rightHalf){
+        int leftSize = leftHalf.length;
+        int rightSize = rightHalf.length;
+
+        int i=0, j =0, k=0;
+
+        while (i < leftSize && j < rightSize) {
+            if (leftHalf[i] <= rightHalf[j]) {
+                numbers[k] = leftHalf[i];
+                i++;
+            }
+            else {
+                numbers[k] = rightHalf[j];
+                j++;
+            }
+            k++;
+        }
+        while (i < leftSize){
+            numbers[k] = leftHalf[i];
+            i++;
+            k++;
+        }
+
+        while (j < rightSize){
+            numbers[k] = rightHalf[j];
+            j++;
+            k++;
+        }
+    }
+
+
+    private static void printArray(int[] numbers) {
+        for (int i = 0; i < numbers.length; i++) {
+            System.out.print(numbers[i]+" ");
+        }
+    }
+
+
+}
Index: Sorting/mergeSort/MergeSortExample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/mergeSort/MergeSortExample.java b/Sorting/mergeSort/MergeSortExample.java
new file mode 100644
--- /dev/null	(revision cd0bfc92b86ca1ac2a05d2256e05fe50dcbe68ed)
+++ b/Sorting/mergeSort/MergeSortExample.java	(revision cd0bfc92b86ca1ac2a05d2256e05fe50dcbe68ed)
@@ -0,0 +1,71 @@
+package com.dataStructure.Sorting.mergeSort;
+
+public class MergeSortExample {
+    public static void main(String[] args) {
+        int[] arr = {8, 2, 3, 5, 4, 7, 6, 1};
+
+        mergeSort(arr);
+
+        for (int i = 0; i < arr.length; i++) {
+            System.out.println(arr[i] + " ");
+        }
+    }
+
+    private static void mergeSort(int[] arr) {
+        int length = arr.length;
+        if (length <= 1) return; // base case
+
+        int mid = length / 2;
+        int[] leftArray = new int[mid];
+        int[] rightArray = new int[length - mid];
+
+        int i = 0; // left array
+        int j = 0; // right array
+
+        for (; i < length; i++) {
+            if (i < mid) {
+                leftArray[i] = arr[i];
+            } else {
+                rightArray[j] = arr[i];
+                j++;
+            }
+        }
+        mergeSort(leftArray);
+        mergeSort(rightArray);
+        merge(leftArray, rightArray, arr);
+
+    }
+
+    private static void merge(int[] leftArray, int[] rightArray, int[] arr) {
+        int leftSize = arr.length / 2;
+        int rightSize = arr.length - leftSize;
+
+        int i = 0, l = 0, r = 0; // Indices
+        // check the conditions for merging
+        while (l < leftSize && r < rightSize) {
+            if (leftArray[l] < rightArray[r]) {
+                arr[i] = leftArray[l];
+                i++;
+                l++;
+            } else {
+                arr[i] = rightArray[r];
+                i++;
+                r++;
+            }
+        }
+        while (l < leftSize) {
+            arr[i] = leftArray[l];
+            i++;
+            l++;
+        }
+        while (r < rightSize) {
+            arr[i] = rightArray[r];
+            i++;
+            r++;
+        }
+    }
+
+
+
+
+}
Index: Sorting/quickSort/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/quickSort/Main.java b/Sorting/quickSort/Main.java
new file mode 100644
--- /dev/null	(revision cd0bfc92b86ca1ac2a05d2256e05fe50dcbe68ed)
+++ b/Sorting/quickSort/Main.java	(revision cd0bfc92b86ca1ac2a05d2256e05fe50dcbe68ed)
@@ -0,0 +1,42 @@
+package com.dataStructure.Sorting.quickSort;
+
+import java.util.Arrays;
+import java.util.Random;
+
+public class Main {
+    public static void main(String[] args) {
+        for (int size = 10; size < 100_000_000; size *=2) {
+            testTimeForSize(size);
+        }
+    }
+    public static void testTimeForSize(int size){
+        int[] a = generateSortedIntArray(size);
+
+        long start = System.currentTimeMillis();
+
+        QuickSort.sort(a);
+       // Arrays.sort(a);
+        long end = System.currentTimeMillis();
+
+        System.out.println("Time elapsed("+ size +" ):" + (end - start) / 1000.0F);
+    }
+
+    /*public static int[] generateRandomIntArray(int size){
+        int[] a = new int[size];
+
+        Random random = new Random();
+
+        for (int i = 0; i <size ; i++) {
+            a[i] = random.nextInt();
+        }
+        return a;
+    }*/
+    public static int[] generateSortedIntArray(int size){
+        int[] a = new int[size];
+        for (int i = 0; i < size; i++) {
+            a[i] = i;
+        }
+        return a;
+    }
+}
+
Index: Sorting/quickSort/QuickSort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/quickSort/QuickSort.java b/Sorting/quickSort/QuickSort.java
new file mode 100644
--- /dev/null	(revision cd0bfc92b86ca1ac2a05d2256e05fe50dcbe68ed)
+++ b/Sorting/quickSort/QuickSort.java	(revision cd0bfc92b86ca1ac2a05d2256e05fe50dcbe68ed)
@@ -0,0 +1,44 @@
+package com.dataStructure.Sorting.quickSort;
+
+public class QuickSort {
+
+    /*
+     *
+     * Sorts the array in-place in non-decreasing order.
+     * @param a the array to be insertionSorted
+     * */
+
+    public static void sort(int[] arr) {
+        quickSort(arr, 0, arr.length - 1);
+    }
+
+    private static void quickSort(int[] a, int p, int r) {
+        if (p < r) {
+            int q = partition(a, p, r);
+            quickSort(a, p, q - 1);
+            quickSort(a, q + 1, r);
+        }
+    }
+
+    private static int partition(int[] a, int p, int r) {
+
+        int x = a[r];
+
+        int i = p - 1;
+
+        for (int j = p; j < r; j++) {
+            if (a[j] <= x) {
+                i = i + 1;
+                int swap = a[i];
+                a[i] = a[j];
+                a[j] = swap;
+            }
+        }
+        int swap = a[i + 1];
+        a[i + 1] = a[r];
+        a[r] = swap;
+        return i + 1;
+    }
+
+
+}
Index: Sorting/quickSort/QuickSortExercises.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/quickSort/QuickSortExercises.java b/Sorting/quickSort/QuickSortExercises.java
new file mode 100644
--- /dev/null	(revision 6c901891eeb91604c13be77489882a95628f410a)
+++ b/Sorting/quickSort/QuickSortExercises.java	(revision 6c901891eeb91604c13be77489882a95628f410a)
@@ -0,0 +1,86 @@
+package com.dataStructure.Sorting.quickSort;
+
+import java.util.Random;
+
+public class QuickSortExercises {
+
+    public static void main(String[] args) {
+        Random random = new Random();
+        
+        int[] numbers = new int[10];
+
+        for (int i = 0; i < numbers.length; i++) {
+            numbers[i]  = random.nextInt(10);
+        }
+
+        System.out.println("Before: ");
+
+        printArray(numbers);
+
+       // quickSort(numbers, 0 , numbers.length-1);
+        quickSort(numbers);
+
+
+        System.out.println("\nAfter: ");
+        printArray(numbers);
+
+    }
+
+    private static void quickSort(int[] array){
+        quickSort(array, 0 , array.length-1);
+    }
+
+    private static void quickSort(int[] array, int lowIndex, int highIndex){
+
+        if (lowIndex >= highIndex){
+            return;
+        }
+        int  pivotIndex= new Random().nextInt(highIndex - lowIndex) + lowIndex;
+       // int pivot = array[highIndex];
+        int pivot = array[pivotIndex];
+        swap(array, pivotIndex, highIndex);
+
+        int leftPointer = partition(array, lowIndex, highIndex, pivot);
+
+
+        quickSort(array, lowIndex, leftPointer -1);
+        quickSort(array, leftPointer +1, highIndex);
+
+    }
+
+    private static int partition(int[] array, int lowIndex, int highIndex, int pivot) {
+        int leftPointer = lowIndex;
+        int rightPointer  = highIndex;
+
+        while (leftPointer < rightPointer){
+            while (array[leftPointer] <= pivot && leftPointer < rightPointer){
+                leftPointer ++;
+            }
+
+            while (array[rightPointer] >= pivot && leftPointer < rightPointer){
+                rightPointer--;
+            }
+
+            swap(array, leftPointer, rightPointer);
+        }
+
+
+        swap(array, leftPointer, highIndex);
+        return leftPointer;
+    }
+
+
+    private static void swap(int[] array, int index1, int index2){
+
+        int temp = array[index1];
+        array[index1] = array[index2];
+        array[index2] = temp;
+
+    }
+    private static void printArray(int[] numbers){
+        for (int i = 0; i < numbers.length; i++) {
+            System.out.print(numbers[i]+" ");
+        }
+    }
+
+}
Index: Sorting/quickSort/test_result.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/quickSort/test_result.txt b/Sorting/quickSort/test_result.txt
new file mode 100644
--- /dev/null	(revision cd0bfc92b86ca1ac2a05d2256e05fe50dcbe68ed)
+++ b/Sorting/quickSort/test_result.txt	(revision cd0bfc92b86ca1ac2a05d2256e05fe50dcbe68ed)
@@ -0,0 +1,68 @@
+        Quick Sort Test
+
+Time elapsed(80 ):0.0
+Time elapsed(160 ):0.0
+Time elapsed(320 ):0.0
+Time elapsed(640 ):0.002
+Time elapsed(1280 ):0.0
+Time elapsed(2560 ):0.0
+Time elapsed(5120 ):0.001
+Time elapsed(10240 ):0.001
+Time elapsed(20480 ):0.001
+Time elapsed(40960 ):0.002
+Time elapsed(81920 ):0.005
+Time elapsed(163840 ):0.011
+Time elapsed(327680 ):0.021
+Time elapsed(655360 ):0.045
+Time elapsed(1310720 ):0.094
+Time elapsed(2621440 ):0.193
+Time elapsed(5242880 ):0.394
+Time elapsed(10485760 ):0.801
+Time elapsed(20971520 ):1.667
+Time elapsed(41943040 ):3.41
+Time elapsed(83886080 ):7.12
+
+
+        Array.sort(Java sorting)
+
+Time elapsed(10 ):0.002
+Time elapsed(20 ):0.0
+Time elapsed(40 ):0.0
+Time elapsed(80 ):0.001
+Time elapsed(160 ):0.0
+Time elapsed(320 ):0.0
+Time elapsed(640 ):0.0
+Time elapsed(1280 ):0.0
+Time elapsed(2560 ):0.001
+Time elapsed(5120 ):0.001
+Time elapsed(10240 ):0.001
+Time elapsed(20480 ):0.001
+Time elapsed(40960 ):0.005
+Time elapsed(81920 ):0.007
+Time elapsed(163840 ):0.011
+Time elapsed(327680 ):0.017
+Time elapsed(655360 ):0.034
+Time elapsed(1310720 ):0.074
+Time elapsed(2621440 ):0.151
+Time elapsed(5242880 ):0.311
+Time elapsed(10485760 ):0.656
+Time elapsed(20971520 ):1.338
+Time elapsed(41943040 ):2.717
+Time elapsed(83886080 ):5.66
+
+
+    Quick Sort on sorted Array:
+Time elapsed(10 ):0.001
+Time elapsed(20 ):0.0
+Time elapsed(40 ):0.0
+Time elapsed(80 ):0.0
+Time elapsed(160 ):0.0
+Time elapsed(320 ):0.001
+Time elapsed(640 ):0.0
+Time elapsed(1280 ):0.003
+Time elapsed(2560 ):0.003
+Time elapsed(5120 ):0.002
+Time elapsed(10240 ):0.008
+Time elapsed(20480 ):0.033
+Exception in thread "main" java.lang.StackOverflowError
+	at com.dataStructure.Sorting.quickSort.QuickSort.quickSort(QuickSort.java:18)
\ No newline at end of file
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/.idea/uiDesigner.xml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/.idea/.gitignore b/Sorting/.idea/.gitignore
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/.idea/.gitignore	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: Sorting/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/.idea/misc.xml b/Sorting/.idea/misc.xml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/.idea/misc.xml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/.idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/.idea/modules.xml b/Sorting/.idea/modules.xml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/.idea/modules.xml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/Sorting.iml" filepath="$PROJECT_DIR$/Sorting.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/.idea/vcs.xml b/Sorting/.idea/vcs.xml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/.idea/vcs.xml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/Sorting.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/Sorting.iml b/Sorting/Sorting.iml
new file mode 100644
--- /dev/null	(revision 5531d5efb09aec02465f00b3006c6ff89085f145)
+++ b/Sorting/Sorting.iml	(revision 5531d5efb09aec02465f00b3006c6ff89085f145)
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module version="4">
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_21">
+    <output url="file://$MODULE_DIR$/out/production/Sorting" />
+    <output-test url="file://$MODULE_DIR$/out/test/Sorting" />
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$" isTestSource="false" packagePrefix="com.dataStructure.Sorting" />
+    </content>
+    <orderEntry type="jdk" jdkName="22" jdkType="JavaSDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module-library">
+      <library name="JUnit4">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.13.1/junit-4.13.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library name="JUnit5.8.1">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.8.1/junit-jupiter-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.8.1/junit-jupiter-api-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.8.1/junit-platform-commons-1.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.8.1/junit-jupiter-params-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.8.1/junit-jupiter-engine-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.8.1/junit-platform-engine-1.8.1.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+  </component>
+</module>
\ No newline at end of file
Index: Sorting/mergeSort/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/mergeSort/.idea/.gitignore b/Sorting/mergeSort/.idea/.gitignore
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/mergeSort/.idea/.gitignore	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: Sorting/mergeSort/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/mergeSort/.idea/misc.xml b/Sorting/mergeSort/.idea/misc.xml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/mergeSort/.idea/misc.xml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/mergeSort/.idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/mergeSort/.idea/modules.xml b/Sorting/mergeSort/.idea/modules.xml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/mergeSort/.idea/modules.xml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/mergeSort.iml" filepath="$PROJECT_DIR$/mergeSort.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/mergeSort/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/mergeSort/.idea/vcs.xml b/Sorting/mergeSort/.idea/vcs.xml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/mergeSort/.idea/vcs.xml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/.idea/.gitignore b/Sorting/out/production/Sorting/com/dataStructure/Sorting/.idea/.gitignore
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/.idea/.gitignore	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/.idea/misc.xml b/Sorting/out/production/Sorting/com/dataStructure/Sorting/.idea/misc.xml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/.idea/misc.xml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/.idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/.idea/modules.xml b/Sorting/out/production/Sorting/com/dataStructure/Sorting/.idea/modules.xml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/.idea/modules.xml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/Sorting.iml" filepath="$PROJECT_DIR$/Sorting.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/.idea/vcs.xml b/Sorting/out/production/Sorting/com/dataStructure/Sorting/.idea/vcs.xml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/.idea/vcs.xml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/Sorting.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/Sorting.iml b/Sorting/out/production/Sorting/com/dataStructure/Sorting/Sorting.iml
new file mode 100644
--- /dev/null	(revision 4074af02eae38029c3b07f7b6b31534079c45a5c)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/Sorting.iml	(revision 4074af02eae38029c3b07f7b6b31534079c45a5c)
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module version="4">
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_21">
+    <output url="file://$MODULE_DIR$/out/production/Sorting" />
+    <output-test url="file://$MODULE_DIR$/out/test/Sorting" />
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$" isTestSource="false" packagePrefix="com.dataStructure.Sorting" />
+    </content>
+    <orderEntry type="jdk" jdkName="22" jdkType="JavaSDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module-library">
+      <library name="JUnit4">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.13.1/junit-4.13.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+    <orderEntry type="module-library">
+      <library name="JUnit5.8.1">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.8.1/junit-jupiter-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.8.1/junit-jupiter-api-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.8.1/junit-platform-commons-1.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.8.1/junit-jupiter-params-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.8.1/junit-jupiter-engine-5.8.1.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.8.1/junit-platform-engine-1.8.1.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+  </component>
+</module>
\ No newline at end of file
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/insertionsort/test_result.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/insertionsort/test_result.txt b/Sorting/out/production/Sorting/com/dataStructure/Sorting/insertionsort/test_result.txt
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/insertionsort/test_result.txt	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,49 @@
+Insertion Sort
+
+Time elapsed:( 10 ) 0.0
+Time elapsed:( 20 ) 0.0
+Time elapsed:( 40 ) 0.0
+Time elapsed:( 80 ) 0.0
+Time elapsed:( 160 ) 0.001
+Time elapsed:( 320 ) 0.0
+Time elapsed:( 640 ) 0.001
+Time elapsed:( 1280 ) 0.001
+Time elapsed:( 2560 ) 0.002
+Time elapsed:( 5120 ) 0.004
+Time elapsed:( 10240 ) 0.018
+Time elapsed:( 20480 ) 0.024
+Time elapsed:( 40960 ) 0.09
+Time elapsed:( 81920 ) 0.372
+Time elapsed:( 163840 ) 1.405
+Time elapsed:( 327680 ) 5.32
+Time elapsed:( 655360 ) 21.991
+Time elapsed:( 1310720 ) 92.965
+
+
+Arrays Sort( Java default libs)
+
+Time elapsed:( 10 ) 0.001
+Time elapsed:( 20 ) 0.0
+Time elapsed:( 40 ) 0.0
+Time elapsed:( 80 ) 0.001
+Time elapsed:( 160 ) 0.0
+Time elapsed:( 320 ) 0.0
+Time elapsed:( 640 ) 0.0
+Time elapsed:( 1280 ) 0.0
+Time elapsed:( 2560 ) 0.001
+Time elapsed:( 5120 ) 0.001
+Time elapsed:( 10240 ) 0.001
+Time elapsed:( 20480 ) 0.003
+Time elapsed:( 40960 ) 0.003
+Time elapsed:( 81920 ) 0.006
+Time elapsed:( 163840 ) 0.011
+Time elapsed:( 327680 ) 0.021
+Time elapsed:( 655360 ) 0.034
+Time elapsed:( 1310720 ) 0.072
+Time elapsed:( 2621440 ) 0.148
+Time elapsed:( 5242880 ) 0.316
+Time elapsed:( 10485760 ) 0.646
+Time elapsed:( 20971520 ) 1.298
+Time elapsed:( 41943040 ) 2.735
+Time elapsed:( 83886080 ) 5.547
+
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/.idea/.gitignore b/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/.idea/.gitignore
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/.idea/.gitignore	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/.idea/misc.xml b/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/.idea/misc.xml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/.idea/misc.xml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/.idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/.idea/modules.xml b/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/.idea/modules.xml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/.idea/modules.xml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/mergeSort.iml" filepath="$PROJECT_DIR$/mergeSort.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/.idea/vcs.xml b/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/.idea/vcs.xml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/.idea/vcs.xml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/test_result.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/test_result.txt b/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/test_result.txt
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/test_result.txt	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,43 @@
+ MERGE SORT
+Time elapsed(10 ):0.0
+Time elapsed(20 ):0.0
+Time elapsed(40 ):0.0
+Time elapsed(80 ):0.0
+Time elapsed(160 ):0.0
+Time elapsed(320 ):0.001
+Time elapsed(640 ):0.0
+Time elapsed(1280 ):0.0
+Time elapsed(2560 ):0.0
+Time elapsed(5120 ):0.002
+Time elapsed(10240 ):0.001
+Time elapsed(20480 ):0.003
+Time elapsed(40960 ):0.005
+Time elapsed(81920 ):0.01
+Time elapsed(163840 ):0.018
+Time elapsed(327680 ):0.031
+Time elapsed(655360 ):0.071
+
+Array Sorted(Java):
+
+Time elapsed(10 ):0.002
+Time elapsed(20 ):0.0
+Time elapsed(40 ):0.0
+Time elapsed(80 ):0.001
+Time elapsed(160 ):0.001
+Time elapsed(320 ):0.0
+Time elapsed(640 ):0.0
+Time elapsed(1280 ):0.001
+Time elapsed(2560 ):0.001
+Time elapsed(5120 ):0.001
+Time elapsed(10240 ):0.001
+Time elapsed(20480 ):0.002
+Time elapsed(40960 ):0.006
+Time elapsed(81920 ):0.007
+Time elapsed(163840 ):0.017
+Time elapsed(327680 ):0.026
+Time elapsed(655360 ):0.038
+
+
+Result will be better than insertion sort.
+
+Merge sort will be expensive for Space complexity.
\ No newline at end of file
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/test_result.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/test_result.txt b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/test_result.txt
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/test_result.txt	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,68 @@
+        Quick Sort Test
+
+Time elapsed(80 ):0.0
+Time elapsed(160 ):0.0
+Time elapsed(320 ):0.0
+Time elapsed(640 ):0.002
+Time elapsed(1280 ):0.0
+Time elapsed(2560 ):0.0
+Time elapsed(5120 ):0.001
+Time elapsed(10240 ):0.001
+Time elapsed(20480 ):0.001
+Time elapsed(40960 ):0.002
+Time elapsed(81920 ):0.005
+Time elapsed(163840 ):0.011
+Time elapsed(327680 ):0.021
+Time elapsed(655360 ):0.045
+Time elapsed(1310720 ):0.094
+Time elapsed(2621440 ):0.193
+Time elapsed(5242880 ):0.394
+Time elapsed(10485760 ):0.801
+Time elapsed(20971520 ):1.667
+Time elapsed(41943040 ):3.41
+Time elapsed(83886080 ):7.12
+
+
+        Array.sort(Java sorting)
+
+Time elapsed(10 ):0.002
+Time elapsed(20 ):0.0
+Time elapsed(40 ):0.0
+Time elapsed(80 ):0.001
+Time elapsed(160 ):0.0
+Time elapsed(320 ):0.0
+Time elapsed(640 ):0.0
+Time elapsed(1280 ):0.0
+Time elapsed(2560 ):0.001
+Time elapsed(5120 ):0.001
+Time elapsed(10240 ):0.001
+Time elapsed(20480 ):0.001
+Time elapsed(40960 ):0.005
+Time elapsed(81920 ):0.007
+Time elapsed(163840 ):0.011
+Time elapsed(327680 ):0.017
+Time elapsed(655360 ):0.034
+Time elapsed(1310720 ):0.074
+Time elapsed(2621440 ):0.151
+Time elapsed(5242880 ):0.311
+Time elapsed(10485760 ):0.656
+Time elapsed(20971520 ):1.338
+Time elapsed(41943040 ):2.717
+Time elapsed(83886080 ):5.66
+
+
+    Quick Sort on sorted Array:
+Time elapsed(10 ):0.001
+Time elapsed(20 ):0.0
+Time elapsed(40 ):0.0
+Time elapsed(80 ):0.0
+Time elapsed(160 ):0.0
+Time elapsed(320 ):0.001
+Time elapsed(640 ):0.0
+Time elapsed(1280 ):0.003
+Time elapsed(2560 ):0.003
+Time elapsed(5120 ):0.002
+Time elapsed(10240 ):0.008
+Time elapsed(20480 ):0.033
+Exception in thread "main" java.lang.StackOverflowError
+	at com.dataStructure.Sorting.quickSort.QuickSort.quickSort(QuickSort.java:18)
\ No newline at end of file
Index: Sorting/quickSort/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/quickSort/.idea/.gitignore b/Sorting/quickSort/.idea/.gitignore
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/quickSort/.idea/.gitignore	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: Sorting/quickSort/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/quickSort/.idea/misc.xml b/Sorting/quickSort/.idea/misc.xml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/quickSort/.idea/misc.xml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/quickSort/.idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/quickSort/.idea/modules.xml b/Sorting/quickSort/.idea/modules.xml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/quickSort/.idea/modules.xml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/quickSort.iml" filepath="$PROJECT_DIR$/quickSort.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/quickSort/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/quickSort/.idea/vcs.xml b/Sorting/quickSort/.idea/vcs.xml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/quickSort/.idea/vcs.xml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/.gitignore b/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/.gitignore
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/.gitignore	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/misc.xml b/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/misc.xml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/misc.xml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/modules.xml b/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/modules.xml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/modules.xml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/quickSort.iml" filepath="$PROJECT_DIR$/quickSort.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/vcs.xml b/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/vcs.xml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/vcs.xml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/quickSort.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/quickSort.iml b/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/quickSort.iml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/quickSort.iml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$" isTestSource="false" packagePrefix="com.dataStructure.Sorting.quickSort" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/test_result.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/test_result.txt b/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/test_result.txt
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/test_result.txt	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,68 @@
+        Quick Sort Test
+
+Time elapsed(80 ):0.0
+Time elapsed(160 ):0.0
+Time elapsed(320 ):0.0
+Time elapsed(640 ):0.002
+Time elapsed(1280 ):0.0
+Time elapsed(2560 ):0.0
+Time elapsed(5120 ):0.001
+Time elapsed(10240 ):0.001
+Time elapsed(20480 ):0.001
+Time elapsed(40960 ):0.002
+Time elapsed(81920 ):0.005
+Time elapsed(163840 ):0.011
+Time elapsed(327680 ):0.021
+Time elapsed(655360 ):0.045
+Time elapsed(1310720 ):0.094
+Time elapsed(2621440 ):0.193
+Time elapsed(5242880 ):0.394
+Time elapsed(10485760 ):0.801
+Time elapsed(20971520 ):1.667
+Time elapsed(41943040 ):3.41
+Time elapsed(83886080 ):7.12
+
+
+        Array.sort(Java sorting)
+
+Time elapsed(10 ):0.002
+Time elapsed(20 ):0.0
+Time elapsed(40 ):0.0
+Time elapsed(80 ):0.001
+Time elapsed(160 ):0.0
+Time elapsed(320 ):0.0
+Time elapsed(640 ):0.0
+Time elapsed(1280 ):0.0
+Time elapsed(2560 ):0.001
+Time elapsed(5120 ):0.001
+Time elapsed(10240 ):0.001
+Time elapsed(20480 ):0.001
+Time elapsed(40960 ):0.005
+Time elapsed(81920 ):0.007
+Time elapsed(163840 ):0.011
+Time elapsed(327680 ):0.017
+Time elapsed(655360 ):0.034
+Time elapsed(1310720 ):0.074
+Time elapsed(2621440 ):0.151
+Time elapsed(5242880 ):0.311
+Time elapsed(10485760 ):0.656
+Time elapsed(20971520 ):1.338
+Time elapsed(41943040 ):2.717
+Time elapsed(83886080 ):5.66
+
+
+    Quick Sort on sorted Array:
+Time elapsed(10 ):0.001
+Time elapsed(20 ):0.0
+Time elapsed(40 ):0.0
+Time elapsed(80 ):0.0
+Time elapsed(160 ):0.0
+Time elapsed(320 ):0.001
+Time elapsed(640 ):0.0
+Time elapsed(1280 ):0.003
+Time elapsed(2560 ):0.003
+Time elapsed(5120 ):0.002
+Time elapsed(10240 ):0.008
+Time elapsed(20480 ):0.033
+Exception in thread "main" java.lang.StackOverflowError
+	at com.dataStructure.Sorting.quickSort.QuickSort.quickSort(QuickSort.java:18)
\ No newline at end of file
Index: Sorting/quickSort/quickSort.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/quickSort/quickSort.iml b/Sorting/quickSort/quickSort.iml
new file mode 100644
--- /dev/null	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
+++ b/Sorting/quickSort/quickSort.iml	(revision 537fe8f2001c383b15a6ef0962c2548cb9b252d5)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$" isTestSource="false" packagePrefix="com.dataStructure.Sorting.quickSort" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: Sorting/quickSort/Quicksort1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/quickSort/Quicksort1.java b/Sorting/quickSort/Quicksort1.java
new file mode 100644
--- /dev/null	(revision 6c901891eeb91604c13be77489882a95628f410a)
+++ b/Sorting/quickSort/Quicksort1.java	(revision 6c901891eeb91604c13be77489882a95628f410a)
@@ -0,0 +1,50 @@
+package com.dataStructure.Sorting.quickSort;
+
+public class Quicksort1 {
+
+    public static void main(String[] args) {
+        int[] arr = {8, 2, 5, 3, 9, 4, 7, 6, 1};
+
+        quickSort(arr, 0, arr.length - 1);
+
+        for (int i : arr) {
+            System.out.print(i + " ");
+        }
+    }
+
+    private static void quickSort(int[] arr, int start, int end) {
+        if (end <= start) return; // base case last element should be two element. quickSort(array,0,1) will stop.
+
+        int pivot = partition(arr, start, end);
+
+        quickSort(arr, start, pivot - 1);
+        quickSort(arr, pivot + 1, end);
+
+    }
+
+    private static int partition(int[] arr, int start, int end) {
+        int pivot = arr[end];
+
+        int partitionIndex = start - 1;
+
+        for (int j = start; j <= end - 1; j++) {
+            if (arr[j] < pivot) {
+                partitionIndex++;
+                swap(arr, j, partitionIndex);
+
+            }
+        }
+        partitionIndex++;
+        swap(arr, end, partitionIndex);
+
+        return partitionIndex;
+    }
+
+    private static void swap(int[] arr, int end, int partitionIndex) {
+        int temp = arr[partitionIndex];
+        arr[partitionIndex]  = arr[end];
+        arr[end] = temp;
+    }
+
+
+}
Index: Sorting/quickSort/.idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/quickSort/.idea/uiDesigner.xml b/Sorting/quickSort/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(revision 115666b048b3ee8042025f8ef4820c2a952bd69c)
+++ b/Sorting/quickSort/.idea/uiDesigner.xml	(revision 115666b048b3ee8042025f8ef4820c2a952bd69c)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/heapSort/Heap.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/heapSort/Heap.java b/Sorting/heapSort/Heap.java
new file mode 100644
--- /dev/null	(revision c38c7f2417c9c1b611c294b1996f6e1492dbeb8c)
+++ b/Sorting/heapSort/Heap.java	(revision c38c7f2417c9c1b611c294b1996f6e1492dbeb8c)
@@ -0,0 +1,61 @@
+package com.dataStructure.Sorting.heapSort;
+
+public class Heap {
+    int[] arr;
+    int size;
+
+    public Heap(int[] arr) {
+        this.arr = arr;
+        this.size = arr.length;
+
+        this.buildHeap();
+    }
+
+    void buildHeap() {
+        for (int i = this.size / 2 - 1; i >= 0; i--) {
+            this.heapify(i);
+        }
+
+    }
+
+    void heapify(int root_index) {
+        int max_index = root_index;
+        int child = root_index * 2 + 1;
+        if (child < size) {
+            if (arr[child] > arr[max_index]) {
+                max_index = child;
+            }
+        }
+
+        if (child + 1 < size) {
+            if (arr[child + 1] > arr[max_index]) {
+                max_index = child + 1;
+            }
+        }
+
+
+        swap(arr, root_index, max_index);
+        if (root_index != max_index) {
+            heapify(max_index);
+        }
+    }
+
+    void swap(int[] arr, int a, int b) {
+        int temp = arr[a];
+        arr[a] = arr[b];
+        arr[b] = temp;
+    }
+
+    int extractRoot() {
+        int max = arr[0];
+        arr[0] = arr[--size];
+        heapify(0);
+
+        return max;
+    }
+
+    int getSize() {
+        return size;
+    }
+
+}
Index: Sorting/heapSort/HeapSort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/heapSort/HeapSort.java b/Sorting/heapSort/HeapSort.java
new file mode 100644
--- /dev/null	(revision c38c7f2417c9c1b611c294b1996f6e1492dbeb8c)
+++ b/Sorting/heapSort/HeapSort.java	(revision c38c7f2417c9c1b611c294b1996f6e1492dbeb8c)
@@ -0,0 +1,12 @@
+package com.dataStructure.Sorting.heapSort;
+
+public class HeapSort {
+    public static void main(String[] args) {
+        int[] arr = {1, 3, 4, 5, 6, 1231, 65435, 1, 2313, 6544, 5};
+
+        Heap heap = new Heap(arr);
+        while(heap.getSize() >0){
+            System.out.print(heap.extractRoot() + " ");
+        }
+    }
+}
Index: Sorting/heapSort/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/heapSort/Main.java b/Sorting/heapSort/Main.java
new file mode 100644
--- /dev/null	(revision 5531d5efb09aec02465f00b3006c6ff89085f145)
+++ b/Sorting/heapSort/Main.java	(revision 5531d5efb09aec02465f00b3006c6ff89085f145)
@@ -0,0 +1,62 @@
+package com.dataStructure.Sorting.heapSort;
+
+public class Main {
+    private static int N;
+
+    public static void main(String[] args) {
+        int[] arr = {4, 1, 3, 2, 16, 9, 10};
+        sort(arr);
+        for (int i = 0; i < arr.length; i++) {
+            System.out.print(" " + arr[i]);
+        }
+    }
+
+    private static void sort(int[] arr) {
+        heapify(arr);
+
+        for (int i = N / 2; i >= 0; i--) {
+            maxHeap(arr, i);
+        }
+
+    }
+
+    private static void heapify(int[] arr) {
+        N = arr.length - 1;
+
+
+        for (int i = N / 2; i >= 0; i--) {
+            maxHeap(arr, i);
+        }
+
+    }
+
+    private static void maxHeap(int[] arr, int i) {
+
+
+        int left = 2 * i;
+        int right = 2 * i + 1;
+        int max = i;
+
+        if (left <= N && arr[left] > arr[i]) {
+            max = left;
+        }
+
+        if (right <= N && arr[right] > arr[max]) {
+            max = right;
+        }
+
+        if (max != i) {
+            swap(arr, i, max);
+            maxHeap(arr, max);
+        }
+    }
+
+    private static void swap(int[] arr, int i, int j) {
+
+        int temp = arr[i];
+        arr[i] = arr[j];
+        arr[j] = temp;
+
+    }
+
+}
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/.gitignore b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/.gitignore
new file mode 100644
--- /dev/null	(revision c1763151e0817f5dc05253eab5336419078c5401)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/.gitignore	(revision c1763151e0817f5dc05253eab5336419078c5401)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/misc.xml b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/misc.xml
new file mode 100644
--- /dev/null	(revision c1763151e0817f5dc05253eab5336419078c5401)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/misc.xml	(revision c1763151e0817f5dc05253eab5336419078c5401)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/modules.xml b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/modules.xml
new file mode 100644
--- /dev/null	(revision c1763151e0817f5dc05253eab5336419078c5401)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/modules.xml	(revision c1763151e0817f5dc05253eab5336419078c5401)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/quickSort.iml" filepath="$PROJECT_DIR$/quickSort.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/uiDesigner.xml b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(revision c1763151e0817f5dc05253eab5336419078c5401)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/uiDesigner.xml	(revision c1763151e0817f5dc05253eab5336419078c5401)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/vcs.xml b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/vcs.xml
new file mode 100644
--- /dev/null	(revision c1763151e0817f5dc05253eab5336419078c5401)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/.idea/vcs.xml	(revision c1763151e0817f5dc05253eab5336419078c5401)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/.gitignore b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/.gitignore
new file mode 100644
--- /dev/null	(revision c1763151e0817f5dc05253eab5336419078c5401)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/.gitignore	(revision c1763151e0817f5dc05253eab5336419078c5401)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/misc.xml b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/misc.xml
new file mode 100644
--- /dev/null	(revision c1763151e0817f5dc05253eab5336419078c5401)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/misc.xml	(revision c1763151e0817f5dc05253eab5336419078c5401)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/modules.xml b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/modules.xml
new file mode 100644
--- /dev/null	(revision c1763151e0817f5dc05253eab5336419078c5401)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/modules.xml	(revision c1763151e0817f5dc05253eab5336419078c5401)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/quickSort.iml" filepath="$PROJECT_DIR$/quickSort.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/uiDesigner.xml b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(revision c1763151e0817f5dc05253eab5336419078c5401)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/uiDesigner.xml	(revision c1763151e0817f5dc05253eab5336419078c5401)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/vcs.xml b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/vcs.xml
new file mode 100644
--- /dev/null	(revision c1763151e0817f5dc05253eab5336419078c5401)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/vcs.xml	(revision c1763151e0817f5dc05253eab5336419078c5401)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/quickSort.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/quickSort.iml b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/quickSort.iml
new file mode 100644
--- /dev/null	(revision c1763151e0817f5dc05253eab5336419078c5401)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/quickSort.iml	(revision c1763151e0817f5dc05253eab5336419078c5401)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$" isTestSource="false" packagePrefix="com.dataStructure.Sorting.quickSort" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/test_result.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/test_result.txt b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/test_result.txt
new file mode 100644
--- /dev/null	(revision c1763151e0817f5dc05253eab5336419078c5401)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/test_result.txt	(revision c1763151e0817f5dc05253eab5336419078c5401)
@@ -0,0 +1,68 @@
+        Quick Sort Test
+
+Time elapsed(80 ):0.0
+Time elapsed(160 ):0.0
+Time elapsed(320 ):0.0
+Time elapsed(640 ):0.002
+Time elapsed(1280 ):0.0
+Time elapsed(2560 ):0.0
+Time elapsed(5120 ):0.001
+Time elapsed(10240 ):0.001
+Time elapsed(20480 ):0.001
+Time elapsed(40960 ):0.002
+Time elapsed(81920 ):0.005
+Time elapsed(163840 ):0.011
+Time elapsed(327680 ):0.021
+Time elapsed(655360 ):0.045
+Time elapsed(1310720 ):0.094
+Time elapsed(2621440 ):0.193
+Time elapsed(5242880 ):0.394
+Time elapsed(10485760 ):0.801
+Time elapsed(20971520 ):1.667
+Time elapsed(41943040 ):3.41
+Time elapsed(83886080 ):7.12
+
+
+        Array.sort(Java sorting)
+
+Time elapsed(10 ):0.002
+Time elapsed(20 ):0.0
+Time elapsed(40 ):0.0
+Time elapsed(80 ):0.001
+Time elapsed(160 ):0.0
+Time elapsed(320 ):0.0
+Time elapsed(640 ):0.0
+Time elapsed(1280 ):0.0
+Time elapsed(2560 ):0.001
+Time elapsed(5120 ):0.001
+Time elapsed(10240 ):0.001
+Time elapsed(20480 ):0.001
+Time elapsed(40960 ):0.005
+Time elapsed(81920 ):0.007
+Time elapsed(163840 ):0.011
+Time elapsed(327680 ):0.017
+Time elapsed(655360 ):0.034
+Time elapsed(1310720 ):0.074
+Time elapsed(2621440 ):0.151
+Time elapsed(5242880 ):0.311
+Time elapsed(10485760 ):0.656
+Time elapsed(20971520 ):1.338
+Time elapsed(41943040 ):2.717
+Time elapsed(83886080 ):5.66
+
+
+    Quick Sort on sorted Array:
+Time elapsed(10 ):0.001
+Time elapsed(20 ):0.0
+Time elapsed(40 ):0.0
+Time elapsed(80 ):0.0
+Time elapsed(160 ):0.0
+Time elapsed(320 ):0.001
+Time elapsed(640 ):0.0
+Time elapsed(1280 ):0.003
+Time elapsed(2560 ):0.003
+Time elapsed(5120 ):0.002
+Time elapsed(10240 ):0.008
+Time elapsed(20480 ):0.033
+Exception in thread "main" java.lang.StackOverflowError
+	at com.dataStructure.Sorting.quickSort.QuickSort.quickSort(QuickSort.java:18)
\ No newline at end of file
Index: Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/quickSort.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/quickSort.iml b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/quickSort.iml
new file mode 100644
--- /dev/null	(revision c1763151e0817f5dc05253eab5336419078c5401)
+++ b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/quickSort.iml	(revision c1763151e0817f5dc05253eab5336419078c5401)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$" isTestSource="false" packagePrefix="com.dataStructure.Sorting.quickSort" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/uiDesigner.xml b/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(revision c1763151e0817f5dc05253eab5336419078c5401)
+++ b/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/.idea/uiDesigner.xml	(revision c1763151e0817f5dc05253eab5336419078c5401)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: Sorting/queue/PriorityQueue/PriorityQueue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/queue/PriorityQueue/PriorityQueue.java b/Sorting/queue/PriorityQueue/PriorityQueue.java
new file mode 100644
--- /dev/null	(revision 5805babd7534de65477d90519020d34ca4ea829c)
+++ b/Sorting/queue/PriorityQueue/PriorityQueue.java	(revision 5805babd7534de65477d90519020d34ca4ea829c)
@@ -0,0 +1,127 @@
+package com.dataStructure.Sorting.queue.PriorityQueue;
+
+
+import java.util.Arrays;
+
+public class PriorityQueue {
+
+    private Element[] a;
+    private int queueSize;
+
+    private static class Element {
+
+        public Element(Object object, int priority) {
+            this.object = object;
+            this.priority = priority;
+        }
+
+        public Object object;
+        public int priority;
+
+
+    }
+
+
+    public PriorityQueue() {
+        this.a = new Element[10];
+        this.queueSize = 0;
+    }
+
+    public int size(){
+        return this.queueSize;
+    }
+
+    /**
+     * Retrieve the highest priority object in the queue. Null if queue is empty.
+     *
+     * @return highest priority object in the queue, null if empty.
+     */
+
+    public Object poll() {
+        if (this.queueSize == 0) {
+            return null;
+        }
+
+        Element top = this.a[0];
+
+        this.a[0] = this.a[this.queueSize - 1];
+        this.a[this.queueSize - 1] = null;
+        this.queueSize--;
+
+        this.maxHeapify(0, this.queueSize);
+
+        return top.object;
+    }
+
+    /**
+     * Insert given object into the queu with given priority.
+     *
+     * @param object   the object to be inserted
+     * @param priority the priority of the object
+     */
+    public void add(Object object, int priority) {
+        if (this.queueSize == this.a.length) {
+            this.doubleQueueCapacity();
+        }
+
+        this.a[this.queueSize] = new Element(object, priority);
+
+        this.queueSize++;
+
+        int index = parent(this.queueSize - 1);
+
+        do {
+            this.maxHeapify(index, this.queueSize);
+
+            index = parent(index);
+        }while (index > 0);
+
+    }
+
+
+
+    private void doubleQueueCapacity() {
+        Element[] newA = new Element[this.a.length * 2];
+
+        System.arraycopy(this.a, 0, newA, 0, a.length);
+
+        this.a = newA;
+    }
+
+    private static int left(int i) {
+        return 2 * i + 1;
+    }
+
+    private static int right(int i) {
+        return 2 * i + 2;
+    }
+
+    private static int parent(int i){
+        return (i-1)/2;
+    }
+
+    private void maxHeapify(int i, int heapSize) {
+        int l = left(i);
+        int r = right(i);
+        int largest;
+
+        if (l < heapSize && a[l].priority > a[i].priority) {
+            largest = l;
+        } else {
+            largest = i;
+        }
+
+        if (r < heapSize && a[r].priority > a[largest].priority) {
+            largest = r;
+        }
+
+        if (largest != i) {
+            int temp = a[i].priority;
+            a[i].priority = a[largest].priority;
+            a[largest].priority = temp;
+
+            maxHeapify(largest, heapSize);
+        }
+    }
+
+}
Index: Sorting/queue/PriorityQueue/test/PriorityQueueTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sorting/queue/PriorityQueue/test/PriorityQueueTest.java b/Sorting/queue/PriorityQueue/test/PriorityQueueTest.java
new file mode 100644
--- /dev/null	(revision 5531d5efb09aec02465f00b3006c6ff89085f145)
+++ b/Sorting/queue/PriorityQueue/test/PriorityQueueTest.java	(revision 5531d5efb09aec02465f00b3006c6ff89085f145)
@@ -0,0 +1,32 @@
+package com.dataStructure.Sorting.queue.PriorityQueue.test;
+
+import com.dataStructure.Sorting.queue.PriorityQueue.PriorityQueue;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+public class PriorityQueueTest {
+
+    private PriorityQueue priorityQueue;
+
+   @Before
+    public void setUp() throws Exception{
+       this.priorityQueue = new PriorityQueue();
+   }
+
+   @Test
+    public void testAddAndPoll(){
+      this.priorityQueue.add("John", 2);
+      this.priorityQueue.add("Dean", 12);
+
+      String firstOut = (String) this.priorityQueue.poll();
+      String secondOut = (String) this.priorityQueue.poll();
+      String thirdOut = (String) this.priorityQueue.poll();
+
+      assertEquals("John", firstOut);
+      assertEquals("Dean", secondOut);
+      assertNull(thirdOut);
+
+   }
+}
\ No newline at end of file
diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/insertionsort/InsertionSort.class b/Sorting/out/production/Sorting/com/dataStructure/Sorting/insertionsort/InsertionSort.class
new file mode 100644
index 0000000000000000000000000000000000000000..8f9919fd440efbc6965c0d89391115961934377a
GIT binary patch
literal 643
zc$}S3Jx?1!5PjoY`@q5BBQYTagVKP(l23^UB!U<rBqU2tTo}2b$@+YPHTIoZ-yzcH
zU!<d<rizq;Hd4y`1^xt0;><3lpyf_C^XAR&y*Kmw-_L6RyO_@+1;>S$KpGjsR7ajk
zuPehNuiokeeoV-0t5C%if>T^=x)>w8^P`^Ema%NaI`QK~2VNu6vEoZA90ZJ_aKMCD
zy{}B0AoikmK$xtlF!-GGT7f>0tu8Y&waAy<rqs&RBT~f2YCzbmJxXnhkW&xk)5XK;
zYLh@6{;EbG==B*YZb_}>S3>HL`CKEG{>dlVw?<s#3E4)JXg}Cj*6jnKve_73!{tSq
zCj~OA<T%ci$C)^%*M5MmY&**_V@U^3I8NLh;GE-3c#6r<<v$S213RKpC|zIRL#a^y
zSP<<Ekr&^wSjvm?!UbkIi!Y|AGvMas@WxUL^=}Sc4u4%)DI>dVe|v&4bXl&4Y4ov(
zQxu``1_|DCuYz-HYn`R1v4Sa%f=|E245Jjk+jz#vF~&xw4SJ3|+n#0o3gWL>!;nWw
UyKr5+AmSO9Ztbjdb_*~61KD_kWB>pF

diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/insertionsort/Main.class b/Sorting/out/production/Sorting/com/dataStructure/Sorting/insertionsort/Main.class
new file mode 100644
index 0000000000000000000000000000000000000000..1e1ffe6190e2c142652e2264c6c2748197bb88e7
GIT binary patch
literal 1718
zc$}3~-%}e^6#gzrSXdV*P*NKOLnWF35`UDU4WcwPHkg#!AdbV+CAkAzHoKYKn~wC^
z7atv8eD=jx^`Y&w9sdCT8()2>es_~jQ$YuJX7`@^<2&a&-#L4KfBNV*0GrsgF@%JL
zq=OWO1<u`(cV*F&{y}kj|Bh;Ef#G%6clCxqB460GFe0$p4BEw()Uu(&Zc}$dRcr*I
zb_sI*NYM)XhzrH)vzghpVIg7TB{&ww9E@W^VEL?`>eBTE(g(^{q15WO^jkr@>g&xg
zl*a<8e6_GwwK0h)3)2qHW9Efi8pn}VZGp*VHw=}pcigtByPoGpaavoWL|$<4GA?o+
zbeZ)`Ek?UR@mA>in*5Y(my*}-0aH}&RR^<}6S&ZpN2(n7O{u?h^&zcDOJCD%I$y06
zY6BEB{T!5RWHE2yl7rW=ATWJO6alMaW*#%1$)9v#s_@3M^t#&hiaj}O<cz>M6dWvK
ziEe!LwWdgMj#YtVIcO<?iJI%Ho89)l3U}nb$CasC(3IY;3|%wtFDCV&k!Pj$e`-`B
zuHCCue(yBu+?U}2{Z5~<O>SC6adj#|*l_O|8Z50rMe$6SG)y#swKEfYp$!>CNP(d}
zdP=ca#+BHjM9Oc`a@p`<ET@s>pAr*1*3hzfRF|DtCJXBVb|dJ9O;vG?Y@<eo6$506
zt_6XPbSOJ@r4NHvGy+CFZ}Q73Pj({Jx|+|5Y#}QqhVhw=8tN8qn%>$LSa`0F>)#EI
zR9~iEyH#XU2O)d^hrt%<AMAy@LC&6v7HUCo)a{f`>iuuPo#T!=<@jL5dbdNVaMDFt
zdS1iTids2UpZ{ywlToB13%3PwXQFChM_}&1kFrj^!<grtG6eG^A<Q+#?=ojaj)G%q
z@d3myG=}gNzr(#ntnlmf?IPahIEr`hZXdkF*X*4DE(`z#-oxb>xQZ)%;CDP{83&JH
zef0pNwai1<^@r>QzH6ypk<O%3^Xl8FjQ<F)0Qd3Q^AH(=fdWSO1CP<&B$=hjYLUE5
z*vsT<xUJ!Rjw8H7KEPE59>W|;Sf`gs`uGqVNDw!Jk7%VxkC$zq-uK)|a=eszV%Huc
zM~ZLO6C1OcA8~GJcKJT?+utO_Pk;Tf^fON-23V~UcZG?sVVco19J7pQSS@mAoY&&V
zTu&I^eSXP4D>eezY~mXEmAO8Fp{E$PaNR;q{7K3Qd=g7g!KZOr0$Y4<;1*{#t<TZG
H7r6L0jc%H-

diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/Main.class b/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/Main.class
new file mode 100644
index 0000000000000000000000000000000000000000..b467015df8062584268b6fe3fada8d633dbdcdea
GIT binary patch
literal 1684
zc$|$?O>+}R5Pc)9wAN-V*)kHbj2+>~Sh6w7HwkhaY!L++2@_-t#HX<|B`@9&)$WLj
zxh9vKbIF+t*CYpUkrY3Gf0G<jDM-&s0TY`Ps?zk#RQK!GuV?$|v&T;Wtl}F35kz%p
zCSr&)jNRdPdD-S}x4f})N3<nFeA#j>xxx@FmbRiutz9&bfT80p6DCF(ifzv+cevy&
z>G#{R?~8KF^QA=?j_|ue9m-8^xeO^O0=a29qUQN6>z-iHiuKZ#0!*10!#G2>D_r4o
zDXw$3<2iL#uKGUTXNZyKcHO`PPUy&($l~NHd|Ug06b{39yYKtL4bwC&+qQy``nrKh
z<aA7#IECqdBm2^_%V7fY(gI?t5^WQw1SNXML>{Lp-0RbQrV)l%Uiq4Dxss|C+^J}n
z?g42MvtVKlXBbX8d{0z8x6S2EOYYJxkldAopDosFrN$w~l5n~e14Wc{ESOltS%!&Y
zvM}g9b+SprOz|j0X-mhsS85ulXJ83YwY+cQ1AIs@uJ~4xrlBNtD!J-)s0*ov<%+9)
zXGi#(e8;Anbi-?NdyD&)Iu9>3xvSJ%XuN61D-`2|ozE7xkE5+b58nY(WVqiY_=#gY
z8Ae-@xA&U7H{`-NLu8wxVkEC>8(XKMgxjH=MX%Nm1yF_jSCop5RR*Kw_5HS}Sqdzn
z$evS<B;uOq$w2zN*A#Ns>jWcc5{!CId13QjAUZ{sFI`}%I5rGi!`C{ltKPR53NMLU
z?p<$B4EYb9Lyfnk=hIXE>2M2&j)P>EiJ>imLc{a+`n}3gAzl}_x!)7VxF42s@IhBf
zM<J@*wp*4IB(qs}>GP}FJP1UfgBmpVMpSj&Vwm}VSL({Z8K>!kk3ju2Fg1B-{fJIw
zvW#qO;Sty`w29zjTI1nm9G}o?4jgbEpOQ`BGh7%3cgS0TX2y)=skD9{$*BX3OvQGW
zA3Xn4fki{GH01=6YUE&)><NsAz*#j3X<xx|m?DGEu|oEXFiqrdMA=_7q7rK84Ksd6
zoZ@8Xa|cK^4v=15Jiyyz&uhP8CYROn;)nFC`xx&64>A9;pj;R>L1knJaFPIX#OoB!
zU^?Wo5OSOkxu{}iagl~Ky;IC!4OK!(Q{*MuX>><(b4ch%sz61~=6*LCzhUY2Bb1xb
zmFe7lj4e)|eTerqzK^m8&;MBb`Gp<>E_sTZrP2z-YL4y-bTj{gOOo<^NnD}|d&o*7
zE(2C-7T53<u~J&45P62Aj>|fhNU?DWs)vQI;|kdk3b;!D1~%zr(C!9q;x;D#0jlSF
At^fc4

diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/MergeExample.class b/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/MergeExample.class
new file mode 100644
index 0000000000000000000000000000000000000000..973a8c7732692ed7fffbf4be8563dd3c60a552d9
GIT binary patch
literal 2277
zc$}3~U2_vv7=BJRn@yLL^ee3;P35D7B>hN5tVl|wseD8e3Jon_)tM#PrrRdFnau{l
z>;4F@>xI{P0S+>~^uqCvI5K+AFyM1GsjW~QO(y5O=gs@|Jm)>{&o7_s0$9N3Is#BM
z1S3!p66o19?i-n!VOKLt_cqP4ClH#mY|EP$P?D)t4dFebmS@#6%Z6QX>N+$i3Zl77
zQi?>-jiUmZZ9eewHbVrH`Bc6OJ?PcY7ePM;{+6lqu<4m~CU9CbjurfWEGKirwQR5C
zxu#LihA}7*&YA0uYhF06<1GwpI2J)1BLe-0crbrMo@zEjCJP6$c~n=ksZ|}Lcw58q
z2u|Rnz)abxXDWtg(4bZJTCSNXIj%?BOx<*=raWYdQo8)Ws5fe+fbM5la9!h}fSO#(
zw}XyFFfJo@{pA<N8CI_^tb3*_s~<%wf;1-R<=fDf-twDT?c>EvMKFzwz);=TG8Y}Y
zY<RaVZ-Y|PGi<LZA>~tVf|9(v6Tw+Yis~0f@)w;76GRJ^ZC-EH@0so`<DRU(ui%u8
z+N$AN^4w7dy$y@u&ldhK8(I3+4U23KCf5$5TR>R+<!NWQRp#hF#Ek9c`Yk2Pd%exF
zvZs6m^bV{sQg_KS%3DRF;a9I=f&Mkqu6i5nrn*%j={0lRyJpnZNwI5HH#)MfE?Hlh
zd+N3<Hu>A)#g?3wTQ;v)l9JwoFsEfv?B1N?cumhW8b#CFa4O9(Zm=eCJQ~8XjuLKZ
zSdo`V*kk)BE&IN+Wp==}@AZmN_8gb}^Yy_d?HIO$UnBaO*&Hi4&Q`0DeUr6+a=i7h
zVIE?BkoWd0&!*lCv1rt4CCif+8_C<Y=`PlcX47nHxGOOJpGwuRCNTQ%ro6GXF<;>*
zhmriK5ON%GeV3;UcOkXu#}MC92;dyokgwG69@j|Q0JC_Xdl$~*gO2l02=dEO_an5s
zkI_}=(Vyx?Wj-;vyMw;T#6+L|2uGH-74hw>-@iw+FZKvSlRqHA-zj-M-8sv|il2BI
zNBksV=p1wr#JG-fALD?VL@#DI;LcGyhe2GzkY8Y$MMSB)fGnfP$vcOO+`}w%9v`yU
zZu(rJK7btcQ3PHhszKARD4t`0sW?*Fn8Y}Pg=q9?dUr0a?jZPGT&-Okd8%KJk5r!O
z7lO*H8dFDh&^r}V(=l~=X<H?{KSrcFzJr0`ApfrH|MP5$V26WT(o=Fv?t{${6gXuS
zBv|YyVV_{BCkgWuXU%Dz&LG7-!}UC2E^^P4h9ai0Oe*ej7)b)I@uuR$Aqh~a8|p|z
z;lq~sZsQ~BBo#$mrW9b7Jg)Fxg}HLLN-5~ma|-GUbct6q2uX$n7r6t^(f@+)@Hx5H
z<%I1}c9V`_I(|8^J3qNQD;ZK|L&~fcQxiKl7YoILJD8dvBa^Yv^f%~D$Fzw(esGj0
zsbAU-iEWL9{o=a~95C|L&)RVYUN`@3pU>-T4zN!ZcB;n9?;*|vn<2?|m|-i-65~8E
zE|80>#9rjOLiX;Ei7!xqNll$m8d$=8-1NC!ZbR$vC?(06@TIGMODXUeL$;nq&pf3d
z>8W?_pc|X`m{N$<RPhNV&1ZQ8p;uIe+vNH@^8<|Q>fjLlPwaIhYK$zOZbF%hr}?mk
z_;S+m=_hOiJi^SjAPK+jlhEfs$rYBp%6nR2qB}m2K?Vunm|vDGKhc4d^WR&beX+v~
cQt+ohkvzyJB*=pxAGdkZDcxaDeTLyb0eqC%IsgCw

diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/MergeSort.class b/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/MergeSort.class
new file mode 100644
index 0000000000000000000000000000000000000000..a8ef0f23a99172abe853261f14d811998c37f428
GIT binary patch
literal 1195
zc$}3~O;1xn6g|_v_PsvJSLN~57C}*=3JorbL4zR}wWd(D1dJH%qkTg8XyNg2sT-n+
zE8|W#CJ<rGN@EOr-S|6<|9}|knW2JP+svFh_ue`8%$;e!AAZ>fFosJeeDLeg!U!NJ
z(6nejvy;nqc|Mt)TXYJZK=4|rT=GT*{C)k?CJcmhm|@f*EHF^0tR#!JXXiY3qu_10
zPBK?<y%M*tIPSb77s-jgmO!9}df#k1oj#&#2%`~AjHw+0hKez$BO=gzA}C$<oO#Ff
zzo=HL0@`?`$n3^Usq9Q{tjsy?ls&ghPb5<**vr$lTaxRVQ}Y%|>jKHle+j<I)2|bq
zBIQw5|FnRx1$?t<8fzR9S2<jP`kZGMmL}}gT1ipjSmapZhVqb{E_0RPxUVB7VCE_t
zZo#=(lGzQ%MF-`H(ZkO8AU_&}yc^CfTqTKu7)X4A*rVZt#W|>)ezbB9A0?m-?Zgl|
z&{^AjMUeq!!k^gJil3pMFqo>`DD$uX!(t+en8G^ckt{FCq7i$du`P5(WBI`HXd)UX
zTOzLIV-llrLj9hSB*{A|5E!SZ8zj1kX56Bz+vvs}RV+cmI%dYv#T}%sm6g_M`h>E&
zY59nfRdiDm-_4OG@q^TL4D7_BMJ=Dw;;~{XU};+Zt2q+10t$71%CHPe+d@l6&@vKH
z%g7IAHx02{{dE)yY@xM7XDFuSPl7+0twl~{83_=W>Q9BDDbq6J+ZdKqgA9cRw_znL
zQ?0X>K^4X>BGMy+St~?OXwxL&x0A*^RL7ryj!E|SF3)n02hZU=rZ7Yt#teU@4;Y=H
zXO`bbn8RZ@c!CAkSmWwB3V4Mg-ry<TVICjo|A<A!yoq`?upMXEIs+rTh_lLCqTNf&
zls!9c_Rev$chpt*l+~>+MJMk$S{ik}r@k(ByajJ@fqR1-uhGX@r?RnHwFSN=SuLcl
oYyd`;^!)Sa7xF`tCUAhZ-|&e8bR43Uf!>A#QVYHb`7|&70Z`q-MgRZ+

diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/MergeSortExample.class b/Sorting/out/production/Sorting/com/dataStructure/Sorting/mergeSort/MergeSortExample.class
new file mode 100644
index 0000000000000000000000000000000000000000..0faf122b3536f751db3d1bb2e3a1d08751b03b44
GIT binary patch
literal 1994
zc$}S7T~ixX7=BK&A0Y$?lm#gtg3?L?BxsRZzFNRiD1meuq%t_;EXfKBn`~yYRB=YH
z_z_;mi(Wc-Q9B)md;JOi14n;>qt@qaQo(|bV={Zrd*1V&_kEt{yt_aA@%$9P9PURE
zLRg0qg9=R`zGpr*(~eo%NoTkBth_IvP1_~gpA`rXB{rgnpg~78hDO8$#`A75T`+w!
z=X(cv|G=}-IoI=T9xqznjwKiA)tA=Y&&*=ku>>0a+7wWSww4nc4QNJ-j(7~MX!{$C
z++oGHimdJ)FxtojJGPsC;MpagWi7Kf)kZGuF&O9&=q#H1)`DBgoBku)-=$UY&5~c?
z*`eh`=3HW*8Fr?kcnw`TuEx-f9)T;D<QLG(a^;j{l8Y&7vh>C9I{HZ{AV-oUCjW^I
z0cF80(AAQ$OV-*!aoh6N&26bfTgJ_s&W7pPa$R>S{;o~D6Pf>`?i9}#O`A|VhPE!l
zDj;k=%ZxL<9oD&WNf`AuJx?IC#ki)NZ|3(`&2oTG$0(b^u}VAsF2jm;fm|Ky6MxS0
z%tL{wXYcI3T!=k^h}_KCpG!@Gy_zi?J}eQ<xd&d}TC^o~<5fB-35^Xg@49})_ssID
z<?p(MN(3`RC;D47+>YW7=5)-<4p<NvJY!>*9=rQiom8zU7R|ixdW81X`J1c<){-xo
zrGjHs1~aa^e^8#fsLnqfTt6&ZmxQ0!xAs;|B`&5|FdZjn`|<)~%cYX#EjVVSVpVi3
z3S9e7P<1Q`^!<A%@2(b%0XA(2@~1$^*Pr76S82|Ivzq)4;+RGVZ*bHCXBcmCjMV}#
zh-;i1a2;>e4}ZgCVa_Y@$VqfF9FJr-6*ar5YS~SVwytM4BXJIKElyWlSF)MmXVAkl
zJ;SF}bbgDb;hxlUTmhb<^C%>qy!h!jC@UdcB?wtI2^}exoj?@tbG}bN5>`Ls#uzn(
zM8Ir?k;9ymgf@avLQDnVL%(B8M_T-fE@o&9=n%XZAb6b-A0|(yyOpn@9CxeEOwUPl
zt-Ggi5}j1S6KZ%uGt}-Xt{ZAk70siDnl#i@_6b_L6hjN_BTXEsME>I_nRO`~M!S^c
zGxVM@S>$&PXyGbO{B39=<5sluThzhtP$&9`Y>-TnT)m54%+fPQ-#y}7VTK3f`-tL8
z)=M?a0YjPp18R^Uqb5ea9VpStbMJ6B%=~w7gO<X)Gl5PjGf!fimKLbf3-vcNh!+H-
zON|7FU<NuGRm#PWTwSg$rit*#mm{aDGdptHTbQUT6rRuxt+$GshHfZTj3o^%HEigq
zD%wY+U>ZeI1$ClGbjYp1q0{kwaPmUjFSS(duZI78Ch9|C21%(T)5wc&C(!|t8evP1
zQ<R&OV}|taa<xQR*YF<JaSI<&fR8Z+i@Oe`_Hi4ZQm8L59|-)g#xjr)fpsHjCTU60
zL#%knd<o)cM1^gcpfb%U*9C4xk+r43?bu_@M9{wA6{u3?NKN5DWFd7Pig$D})ve&w
Yn<Ow0fFLk|Y4$sK34$c<VHsV20{1PT^Z)<=

diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/Main.class b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/Main.class
new file mode 100644
index 0000000000000000000000000000000000000000..8510eae12f04b465600fc787381c7b4dd8c82adc
GIT binary patch
literal 1602
zc$|$?O>-MX5Pc)9wAN;2*>WTk**Hp&W635F-wBqJ;3$YFk>aG}at=O?S5x*zt6i}>
z3gukk!av}gORm5HTq%klz`x)xP~nmSLeEGLQ+6n;O6s0b_v_cMcl(#Wp8X799rrE7
z5I14iNFd2D^^iZ}Rge3-)s3Bp!jTNgHP?6LHHLV(vK3GK{wpk`V3{~&!$z8+>;(O4
zmrLG};n0!8P*giXC|$z%eCRqob*Q$v>oa7eh~%c*7mXn7xQ_*cQEpbY6kx{26s8&S
zyTTVCmqMk9Zqt|RVaWFx5)`@Jv@nCyCUQ3NnEemm&VD3CpJCb=hN19vnYQbBZltN-
zwr~ao6LU7^@g~E?ld!)3k4Ho!Z4%{eBAg-?XKfU5j<ACv-RD}Gi5pb!g|06NRPcVy
zxcL~!lF}s`i@3lr+vhz|4}6Eq2d>;BFOuAsL@{4(HY%+{?MTAetyw6eVq)3G3f^Xz
zIi?DOIZ!8$1kRO@LR7YheLd)s+L@N?i@U@AjtDpTjz>4yR^V`Ni-)c{k1q|mr&L>R
zopiD_%IWI~=gZr#VG!wgvnIJb+$H##V<H*S9m$<un-9iZ7-xuWQ&xhMQWIdeNps<M
z$#YGtGFY8p7&@Zis_>Meb4lUS!*L@BWF$jAXbZU)bfXE}q>j~tQ4}5@M50?}#mXwn
zB+;<&8E%<qszFhO(kp7N|0w8*F~ia98r+dVNDt*VhxHx@j*8vle%BLGsTBmh;h=W3
z)z>9%?hnK<;fKW<y_&VkQHVPCypAgc328TddXefLk0KG7XfrIHh^mPVhK2tRrL8au
z#yNU*V^ALhOzjZ*y-24jSw=Ro{3F<R<iv1^ev|q#Nq>WuhYr9yc$aJn@8SJ%a+jhN
zXl}|{o6DL{FgbUCiMhny+S8Z6DX_Q(%Ti5Xf>KjRlRb@78aS_Z8m939KGY?0_z0KD
zUeRS@e<03Y(6ULX^);^eC2>lUT`C-4vUPy$`pN;`AbZ*P9t(xMQ50Wi&->5t7Vra>
zUNuzEX=!RBLx9ud%@D5~E)WaFWm$7v(p*%t=kYOCsb~rds9}vzRP<Hy47#HYI41N3
zbr2^zTlmRp#jnm6o*=z4Kfm!+j6Hq%eC6AJMaUB<h?ap8wZBL-N(8v1ix(*-NjKN1
yxYBcWOv50OBN|uq9AbYWY2rGmGD#Vq=;qdOLyODsDShj>Lnn*87VhF6&ioDB%58`M

diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/QuickSort.class b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/QuickSort.class
new file mode 100644
index 0000000000000000000000000000000000000000..21841c61e56bde049896eb98dbbc13222e5b794c
GIT binary patch
literal 956
zc$}3}O>fgc5Ph4h6XLpGDK50Ofdc(9BEFyq0g41jND+ZhLVD??TPFhdBWYa+IC0{a
zz<~=FPE;KF1Gw{NI27J))08W=c4l^F_RX7F`{&7zV*n4aWFv=s5z>K$g22?adaI&c
z)q5Q^x3;@+CQx{g^pdP5kY8C{w{ZcbB5Vg^a0G70{k^E8GS$k`L7WZJZq(|hS;FH7
zgCyS3n`rIK5-1&<+r^cQdcA%MIpJUuQ;hE`p3ahfZxpW!$jALoS75S{^t#Undt2S~
zmD<{+r`+hrYIj|wiQW&LGJBI83Pg?n;&z`04-GGibywHfu1ZsZ+y)7V11_x<*FF~m
z<E>1^JI~bqS=qyPN{6<&-g6}acB?-~<L;A0$0tUmDtg9PVB0z9M?&b~Q%-XiQ44A-
z{0{MrMh<1lf^p_CL+P9*;38b=5@vB}c=)aX1MDy#9?Q-VisuNnDd#YM{2vq>moaDb
znDJ<o4@8mFf#-k1eCYW{7_Wt1U;x8FZu&#uyaApi6<~^Tnh<5unt@Mhx=2VMhp~Bh
z%qAowbEfNnuV*L(xI!z3s|Hc{<id~Pl#Ae}i6R5-(67`y*{MpeYPlAP-3nc+5`0GB
zO1W8;p(`uZ0;P60DcnNyqb0ul`4#GfO4Tx&FwM|+t)||59raM<P(WsqOiE-_CZ~Ba
zy2f{jcU8f4+@b#-7V(Ilr&z`dte75O@+Oxs!Ay_W<S=)EmYzv_)NOmzZF|_Q#2PX6
hR7z;z1}#bC8G~Y(Svbg_@Fx>u`8PcRH_cTp{snqEkh%Z>

diff --git a/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/Main.class b/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/Main.class
new file mode 100644
index 0000000000000000000000000000000000000000..fb8fa32d5e2ebfbaaecc0bfa686700ab88a1fbef
GIT binary patch
literal 1602
zc$|$@Pjk~&5dS?}wqha2iG!Wuq`^>!$VtKd4~+vfn7SBb0^>|L<n$uHNrYv|m7eK@
zYkTQ8=$Q-Gwud&ubov4ME&3HY^un~I`((GIlhBE0tlhWX{q1jepVq(p_3UQ=H*nuT
z0!ba3i4@WdQxEwgUh}xWTie)qC>+U<UUPj{USmjF)vaXe_g`Tk14G9t6DG0@mJ{@A
zT`qY?hC@dVLs9Dlp>zr3^P%hX)S=equFsH@B9fbKUo?ZT<31J)n$@aqDZreGDNHjI
zcZDxPE`<sc-Ig!c!;tSYq{wr-Wnc!Ubreh#G5a6Bo&89PKEt##3`60^Y1*#mxlv60
zwt+J!>6kMyk2e`Eo`m)Ne>5T*#Uf>G6X6W8IBTMebA%lX$zHHyCT>u>7rMSAP{I3k
z?dD@3Po1uqSi}W}**@=yM&LVKK5*q8X_4f<B#K3=)vVfw%8`V#TQ^{#s$<#23f^Xz
zIVKB(K2Rr*8eFiBLR7bieIw{nw{y1Zi@U@AjtDpTjz^Zf9XQ<E;-Ra~W1}YbRM(d6
zlTNlyG5vVLMQi&t45E16tVJphcL{#x7*B?5M{=jv=7TX8#u*aZ6qTY*sR^*#)N|o?
zNpp3qG8mm;7&@ZqD))?{b4lUS<+u?9GLj)5w1wOYy3qt~QpM_Gl!eC!k?2~iTwP_k
zG@1rJ!z~>xH7LqZc}30j9|b)zW;mK%lRGj9=~8}kxZh*PQL<ay?|LGt*g?=64(dls
zeO=(@{y-e#ez;kqSF>I{3en)6*KwtwMw%_3UZjS{qew(L+6;>)qN-zqVd4K>X)BDJ
zagJWy1k^_ZQ#*v77wJ?Z$w;P_e+2uElmsr(GaVb#^fPFA#141|?~=^mJ-j~-?vl3x
zEle3}b9wy<Cg%<?F_+p~d;0P>1(uA#@{|*ppwJAmBv0d13|v$@4b%7lAI2#P_z0It
zUWwBr{y>twpk<R$>ua3xOX8F!xl}s9q<w(=`pN;`AbDB)9t)+SRu*69&->5t7Vra>
zUKLb|!?ILHjsT}gn;~8WTp$*T%W}+dDdwVzJ&%vEN=Y+VKpks@qP(w?rjd;{;F!=C
zR6&yDZ0RS%PF|faJwbM5etzSt1bh1O`O3HdHlawMAX*wKRQ@8-s1V>%oV-jvX|i0S
z<f@;uV;UNf9MQNE&mr+A(mJkFS0*XqleoBb`gc&xW%!i74cwuVL7I)bxQ8=;1LFm4
Ai2wiq

diff --git a/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/QuickSort.class b/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/QuickSort.class
new file mode 100644
index 0000000000000000000000000000000000000000..499de1e26023344e75c16f106ac0960412c7e610
GIT binary patch
literal 956
zc$}3}J#*7Q5PfH#Y^*3>4hkfafB^XtgVit|2AC8u!;A-m6O7%Y$wl^n@?j^63{+J7
z5-4bBsK`*{2hj6pC<5;;jzfzyx4XBy_xA0c^z-z`34q5~vXMi+2<gB=L11b}y;aek
z>b;H{+dJJj6DT}NdP%k>kY8DC+qi^M5w?RdI0AR${(jU^nQCU~AkGG9H){6NEaCCP
zK@#ukO|)@t36u^m?BdF1tyVjOoNzFSDaH>JPiINLH;UH;<dc4<D==A4dfgX;{q1i0
zN^S4aQ?B=8wbxc@qW43m%-$qN0#W_HxIN^-Bg4yL-PJbRRcR`a+av*T$fdR7I^bep
zyqT$Z_qjSaFMIS(>Cg_>d#*&lZuSRh+<ltp_{6AGMb8)uY&!@2NC-WA%4zN*YC&y<
z-yy!y$e~PGFwQ(?D4nweT!u?s!Yr-~58pRnfF0(;6WKXN@dCj%<s9aZ|AS)VD&~wH
zGaildfhdwX@cd7h4?X`F<7=T87{D-)TmBF@Z-8e>1(>3oCPbOEX5f>WE)o*RVQd~A
zvkA$_oas8?>lq3GuF=Zjx<M2^x$t8+<0ANJqR2oi^ebzg>{O*!wOotD?u4#Y2|gom
zrQE8@(3O>Hfl|906mFsM(Gp+&{0enKrD_>Xm`3QkRzq*Tj(VtaC?GRQCM7Z|lhZsI
z-Qc^#yQ<(O?$Q4Mi~6s@Gc02rE2hVnyvZd@Fw^5TIm}(4rDxI_b=w+s+ZuK&u|Z5d
hl@jW>MN1NS#-Lbc77p^K{K<q^{!Nd-ZF7~2e*t~(kh=f?

diff --git a/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/QuickSortExercises.class b/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/QuickSortExercises.class
new file mode 100644
index 0000000000000000000000000000000000000000..c7ac80e97a5bb58e540cb311aaf24eb1c3b9ace6
GIT binary patch
literal 2336
zc$}S9TUQfT6#h;!$%G*o3Iw!C@P?L*G*PRFVq<|yO${PKv6fyOk`YFdOgfo(dG|;3
zRr}yeU+jajY?m)xt6i)Ap+BH6{Q<64`<;{F(n7ns%B-B(XJ_BOZ|`%$&##`p05FM)
zfe^wvv^XM&3UuGL?pXP%RbR=^F5kAxzCiT6Q+ND=KzKO2s3W#v)bgEb{+d;<xHSVh
z!gA@1BaSWsy>8$0i*<Ty!^Lc|0||8Ncq5J;^!_Eu{QahH*BIMv(KuOB-#Bjms^`@G
zdEc|G+IS2}f!L&d%k}JY2Mi2gua13jyor=R?=Bw9-;ld%ogs%y+p_souZ(9G4P-E=
zV}Be6a8O{h?AG!X%eQFID*G+Z&d<A^Puu*LEvLLDH~F~@>Eb=xD?3fQDPX8P6P{<?
z7l;fm72BZ?$1x=1c5HgbaFiH~iCezyNemebOPef9rB^ZVI~K=?)M?GTRzoUsapZBF
zff^Re@g0|lV#<N6_OOE|<9G+B1O{r>nmy&#%a(uL@mDD|eXH&_B>~0kP6{N8qj8*(
z6h;&XW}R{?wm_of)a@&++Oq8}Sj$yvdP;8DsxDfdBlm$)^H&{)A1nPo?#3CRW;w*u
zKfJVCiv)zjPmy+(x57-lyO?o0JvD){$iGkJxST_UgWjPfM(UdPt@7H8)le98OcT7-
zZeFbF-YwQE_C1ol>a45=ve9tvxPGvSsEt5p)xPClbxE4-3B)~`Z*8NFG(NE*oRm!2
zwFX1YyDhJ5Pdk#mft`%xWc@rGldkJGea~vl*#4?pX~uA!<%<J}C~g?|1WP(Tm0kZ#
zU}%dFr+&v>vjbk*gD`ECeb*zlueP6oz_1<s5{atX&7qR(uC*HDI|=?L$A$Y1dl&QV
zEo$E%<Jp}drmSjp-tlcVC|<1BZEvb-HOYXEn*vAvQ>i+Z1qT1!lr3l*;~<Yx2=Y&d
zkQW`-G4Aqw3%(=fGl(Y?LO9Dc+E(Hm*LWb0<2>ITco&7h`A2AcfQj#*-*|?OQn&HF
zF%vFiMqWHZ&q(H2xA7Fl?1Qj){Q9?Vv8Si+Df&m&k>=-++#d<{GI3ZX&Y_cQjE{jX
zrcQDlguE!ac`@|hI5nrRm!<5(dq}AQO%{=${sJ{&Sq`5`73D0Z@IH&}qR&N46Wj;X
zClGptgbrQDCGiq{OvSq@z%<5S60c!~%@<l_9dB*1Vkim+$-(|@%or##G*pyq5akC(
ziSk`Yr5{3j67Z8wRmex`X2HzlMl~~&UWaL>(n)O{Z;wXIR5GFxntb0(2btTn9A!@6
zFuO3sxJS{CVS>-H>SKIzgqLSuPN=F1?aV<{Qu>g@2qj&n6jI(LMOKP2XDDfm(u*sU
zB8s9gM3jJd^9F!^p-P4=rAD>%Xe6m6Babj<CbeAVYjn4_9S=0wXqKPLJls-7UMnSc
zg!}mQPZTBar1s4wJd?RV5Mi8VmNV?v7}EUa5c_<Bz|OF+Np`ZxE^a|AZ9*(<LM#Ok
zr8J`;hG}(0L5$LRb`xSJB7gArUPSx)45lC1>|HsS>V%of70i^G&dr+X%<R?}^r){d
zb1l(v274HFV-DqXZB&)O)u5^b=2TT0vtCnG8S-a0NLb}wR-6f+PnkS913Vhc{hZM8
z6sI2uvij@REVR?lalEgwlXE0$L8b3!kP!bRxDX`GsF8;P+kw#Uyg^^`)PymwkSyRM
Vbw&g}=4TO~s}UCX0v0LQ_b1?6;UWM4

diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/heapSort/HeapSort.class b/Sorting/out/production/Sorting/com/dataStructure/Sorting/heapSort/HeapSort.class
new file mode 100644
index 0000000000000000000000000000000000000000..105da9106ee0b49202fb8200587abded323ab880
GIT binary patch
literal 1346
zc$}3~TTc@~6#k~S-Ihh#A~!Dx0@89T-Y*~uRiH_s#*&(b7l(FI7TVorcS^)x;iHL(
zuRh}gBxp>0^~L|;e^5NL#fSk7ZnASObIy0ZGiPVN{Mi2lU>5Tc_~6$NFc3tDA-ci0
zc&f^+N-DRuAxe@VG;La@oMG@Mk_A6-@J2(JVYp=1Qe`fAUOJ7EY&as7w;gFx=DOf@
zrKc82i9kn-LN^$KiPcQ9pgd;`v?0o%RfNo&FNKGm2_uen4QCB>pz{wh`E6H<8b#R+
zqSTS~c1%0<#4#;N3<R%DDco)YJqou)ypRqr$)~n0<J9SS0~c_Sp{vF>McTGXTs|}9
zI%%%tmUIa-kx6Ec6qJNqA<RqY)6j3=G6ophPpC_6)s>|njsqkM8ip7~PkCBOVF;w{
zG95`<*0jWOqqZiT6~0y_Pdsavc(uSCQ`v{kfLu4Jf${8r)R>~Q8aFM5&cy0TtZAP+
z6@qO)VVmZ_9f!fUnxQxa&X7E9dCG3hOJ3Ss;&rbB4U-I!yxnk0V%}68wf>?xp-R(-
zFh^r_X`uBbA=mA)tK%+JXMJrU(1@mSU&D-=@B@ay-)v25%ia`+q?<#Zr*Fb`wi#X@
zoz-Dr6MT_d<*IN8v$nn2s81d5{%?sZ+jVh5_|fxg-l?hNafmdpR`aG5bUH@HvV@ba
za@Q5EhB=0zQ&H9Mh@to2p>&;_!RW^zU48ZVz|`fZ^$J-jl8j_<WDjh|+a9Jh<T?FF
z&}uXTki-bdFh((UnEV+5iUD}E<zuAi59Er0P_7u%a>bCID{4_P^jP3)t{4r)$r;rs
zBC5y2VG`k3&nprUJ(v9ey*Rpu$kNy@THm7MJz}JF?c*G<i{5t!-*!AQidZKRQDkPI
zVS)Yt%S7loT0EkCO)?nA1j!i;P<N9=b%B7c;u^Jf-D}799Sa(6XwbVU<EGd2E!-xl
UQ}jK0@8BU>5z=On#$)vS1no3cM*si-

diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/heapSort/Main.class b/Sorting/out/production/Sorting/com/dataStructure/Sorting/heapSort/Main.class
new file mode 100644
index 0000000000000000000000000000000000000000..103f3b0240a4e499f1b19e4b58351d6fbc13c1f9
GIT binary patch
literal 1891
zc$|$?O>Y}j6g|%#dt!GII}T2o*ltsrP<!0k1xotiG|+~o2{?5nS3y=byg1W%65C^q
z$A#?sBam1i0a7J)EfPc($`4@4zhKV_LBn}t(*zPw7Bla@_wK#toO|!g&#zwY1Gs~S
zQ3Mdwp&1AvED+z8Ph_zv+gruT#<o@W1j6%n+x8X&g4x_!6hnyUh#EKpL*P=~X%#o6
zC##;@t9w1yDpnoWvl-s7WJlS>RcW^cv@UIdP<DMKw-&(&VmjgmMv?djXmz*iSuJ8Y
zJ$fh0{*CPvAG&tiBZwtir39J3VIYZdfr*yfu@;?nU3#C`UV~QGlWnid*z8KKd?c~Q
z3|plr&SFx>lz|k|0%IrSC&`Z5sT9W(^h<Egz<H%#S1RqtyAhsUFz_ZW3Wx`MR+QJQ
zfwyppUM>0gG96h<%3tZH$Qdw^SB3dZ-RSCuS3FpBHZ6fz*=}18daVu1eIz%UJV}(D
zx@@jV*H-(%q2@Jgs?C*8*@+TET7E~yv+F0xBYB%X(%oX(u@hX_9O=3Of%O%E;i@O=
zJFBwe)6sFAp-t<t>a=TbHMj;To;kM_RjWm%(W=vP>(-L3=tmT%g2Lb!+;tqU>$$SC
zYIzN3vpa-E!c2=;826%B!hIdfs_(>|IizK`pEx_#fL(tSmSo*?++Be$j&^Y1*iXJJ
z+nY_RJ5zR?onEJOT;_iTKHBYAC%7LiRR7B<<&LLVl+9+<_AD0BSZTK{cd;qEU8}33
zEHHa2syaAd=l<W7gVuM(1x{Lk-wVsGrju5fcF2EU=B~(9a1EJ1LOiDtz?Fd$5JZ7*
zqwhf1t6U>^8}AH)zk@~}U@5Nu6s-mIN=?%$wNSWH3x_H-Jsz*rhT@S*Egp_XE9Lwi
z^x*Aue*bGsyuffiU3iHx;0H`R4Txt4zdrX775WtM0UfjIGw~6lc%SP%a#4(?>6fS1
zyA-6vE#Vs8<2p;ZbGS}+H+<fKKatmQQ~ZueW;o+3QM_A>QgKt}9x^X59cs>}zQl-`
z+QZCKaq#Tmw?i)DR1U<bbd*1>1R0MqThiw-&MZ;hDIUV-t<d44M-cb}Q9_T<<@{^t
z&Hy@N?rWRhWBOF+XIYCBans!Mx5adSqYocJ&-@#Gc!17-&;b1xrd0`-L#f7XKH8@X
zsW~l865k+ZrVD1O@GZjWIW6NK#m!8?Ols;ZGp8lB)K@%8CAB?dP4%8RBwAp3ff<%*
z)<+yhmV|O_)n&Ht3LA74w`kqr@Z9H43AonhGN7%jz7!1~()XfY+y#_q1(~med0Lt;
zFN)wROba2#614dn9q6m`UQ_L&kOebEMHMrhsT|IA!oR-3_e}=gVtM9$DrP_IHI>7v
m#&FxGqEX<2PbJ7%RQW!j7;r)b=?dJ%M?NuukFkmhCjSDk^L3d3

diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/QuickSortExercises.class b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/QuickSortExercises.class
new file mode 100644
index 0000000000000000000000000000000000000000..f67ef1b934f55e343802d46c18fe704bee94e1e8
GIT binary patch
literal 2336
zc$}S9TUQfT6#h;!$%G*o3Iw!C@P?L*G*PRFVq<|yO${PKv6fyOk`YFdOgfo(dG|;3
zRr}yeU+jajY?m)xt6i)Ap+BH6{Q<64`<;{F(n7nsN><M7y=R}j_xJ66PWbuN^A`Xn
zP%#ifSceuz1W|$R+twW`U$yEh`Pt>$cG(w*o_FewUl0fnXBTzEHk?|%Q_Wwq>J_(U
zKu1_EopHp`C7{>sdw#Lb-P&+5TkJpr-8$ZgqX)fzNiu)G>Dx8Nc3X5#med=^&0qDL
zx<BuGwpAOCAt?}>v~RhdeeQsP0qoVWFOD~n66oD!2lF?iR;@GSaA{jMpXQbE?4p4T
z26gO@;{Xl{jF#P6zGC?n9a?3-<=Odp*YoL{|FY$j*QAo4+mJ5av%Rv@w3`Bk$}{14
z)_sA<@KUiI`fwaWGH%D_?ih{|gE4W-w>^m=gJJ2DWvSd%4E7z1V?^4t=3T2H4Y@e-
zIL<%~i{<!^OGGiXfvonhgD2y72d4xEYSx-P<<`rVf8Fs{DK&ko?l&a?#q3TBB#WbQ
zoRJhp6bNRWax1n#qU6-=E3MkH?JZc#Ra$yVZrQ3XTAm~Iz^M7F4#SU?{vUVaj8L;2
z;^`k=+O0(b!r`|_Kg(NTrrurLIGvuFKw0G9r*d4*p~Au4p(RG@n)j{p+Kkmu7<5b%
zywz@Atm@t^)+_cslD+DztOl~taPGK%phT1+&{?%_`Bz<%W_tp0kM3J))RE37HiVOs
zDZAESsCl>LmF;OqvNy1kk({ibhhx%p{ig3(jTzftbt}ynuCsh`AQ8n41D{|?$EULE
zp9u_Y5#rSExNCO6OM4Ket+MZW#P-$pGY~kogI^+1Rl7M<a^1C7V|*vU|Fm)8e#73y
zeS3@A_s4j4XNW1QTAg=%n+=K=>vh|ks#;AlpyQ^%k^fYxj%9(te|KdI+Rix0qZESt
z(;?(V$90Tao=?GN#C!(vghB{sxklSYoZ}h~<Z+zmvjgv<5N!St8b7>5zk`0`89GYc
z#`nfdxR4on@d!O5nPc6?Qy8-k!s7Ak-@e73p1!B(A6ZA5-$PPA66i8<SS8M(lWUA0
z16@p=<T?m>QFQZS=)rMXPGK)g*@yR#QU#hUB0>8FTEgm1pTMMwau!o~pT%}@&qYiV
z+y}HL5PF4#4qeA3@e+MZ#k(rNG{#^OuVIGG7g}W<Z*8$+C<+J3!TxQ`7$`C{RFrHG
z<p)NI@>xiwA3}Q)@RLqe$VcjC!OY}FH8Yc5hiRtLNo^f(k4DT?GNKZieBMk4ncK7+
zWlrEQyD-GKN70XAg3q$*WBlX@FVDW5P*oM$nS-jN^dX56O1exbq;{7SSt-Vxp`<ZN
zFRoCED2l=mQ3B%48vy!+CK<Mr8r9OHk))Q4Ji?fn)N+}x(cM-%9%!=BEI*fdxMhsI
zRz_-s`}p-w6eaMa_RS_dles_;VVq``GwjzG(tLA>eLg{8XIR)IJ6U8Gw;+}_A(l2F
zmI8=Uno$tL^tz%TM(I7f39%EAKlpnuqJ4b^(~oTSt{hBt!c64~X39+GX3cbFc54iJ
z)a%P!OWZhvJ&d|BhjO|$s!HH$P*nnRsw$0Huc@jG`Li1&tWuX1XTs-GCQr@)j|Ou;
zCv-f;=?8+W{<<{_?eudT?`!Pj9En;`>H8TZ#D57c1W7Y$<e|WJAoM$L(3d<lVazKe
Y3;0N#5rL2SUBu^Vgay8UMGE%)3D-j5ApigX

diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/Quicksort1.class b/Sorting/out/production/Sorting/com/dataStructure/Sorting/quickSort/Quicksort1.class
new file mode 100644
index 0000000000000000000000000000000000000000..b82003bbf7cdcefd651e207166f47b21063de8cc
GIT binary patch
literal 1814
zc$}40O;aOP6g@BLPA8!u8JK`WLIxB@2uuQgFe4dJ2gQj7qm?PF$Yvf%7c?Z@vC~0W
zxtSl~+F7`9gA1jmEPjCH!rx%|BP<s)p4UkQEYQ+a^6q{2-FNRf=e_Ry{Osu&fOqg=
z93g}aXeM+-1d<2xNEVvX*(+3b53IT`5V>bNw!bbAo?qCGBZ`=TxQQW{0{ObzDm0`o
ztG?H*`(4i}R9(-vx&8C5T|ZQl!Y9h>&|49R4Z;G({7$J<TG)<Z1PKF46W1{MHwe|^
zj&HTt+3hkvRSs5cxA3uNJ3d=lvQ-=<kLxB<7#Emm$wO<yb?Vap)b{u3b$sdg9qyek
zEtD@5_E}-C7{?2^VPMik8X1AHE9wjAZ8cLRE*Iztk~MJ?(<IlH<nG(9Gay$|>o1yk
zNvWlEzL0I24Yy$lB+9m9ebjC3THZss+hk<4?AB#-TY9#d_k)_hZ<D}s`Tt2><j$6~
ziDZ0!=PKX=!sf5UJn8MR!`KyRlwNwCKxl_~!&P6_54U7HKxQCsV43nzVs)Bf%V{XF
z>?4;maUd`<kfY=@tS=Q6t403ts@wJI)~2oKCC(w|RePTQeb@Cnz9-vTmcQ>dI#KZQ
zg~W6sg16(mv-b^br~`jjVD=ob?Hsv>Rv&op4s6Q0?|R1qUtc`Beqyiq1L-uHR%f>C
zx`*9%@v;K{wDI9_+qxqCqK3T(sJL*s#D;7(tF~`ZU$f*mmbcNAosQKp@V>y@e}Za&
zCzAd5R6e`CWX$juhM+z=gnH6B&T>|u6)Kwh5#oeS2y+}GK`@M49L-(=UdB9a3=7Eh
zH~$KanSe~jeu~$^$!Mjf>6MyJ8;MkEMlx2ZMU6@=8A+<qNHUm=YL)V0c=1eYoWfY#
zS~^<~uWBi6>KkO1Qd)jh{~p6B{VB$PA29J)6W>1n{UiXRfK3JsBUmP%HxS1bUqheK
zKEiMScA9xx^cS&2$b^R5$kQ%kg<O{je1)?Kgr4&r=>}dg@G8H86#qb$g@yvYirrUa
zr_p9J=_k-ma_P(|rq*-msQ`IyN_)hBaSm-fXqY6pQ3ANm`<cQNTPaw%UZns60`D~f
z6oL0Ty%2X?!z#US05A*@AsD_?`e1%xNHJf_W%BE3t+A@5SM`*h(Hc*X$))r>^&6pB
zbW_?XW*+O*?Kc(31oM>k-2iBgm6ehjGCa;Kq28o7&2ff@oTXxOgn0{hc;E{BIy;+O
zyVKWnZ9rpfKx3^>LnDbEjTnjCrKbgiOoX5D4JgFqpR5sAufsmGdSB**VwTI~()kKC
zuAJY+(O_8>y3LJw{#O((Xqp&+Ndyo?;N9(m8R8{TV8R5b>J@R1Hp;BG_<IxYaTcey
Ki3j)qH~s=H&T(!4

diff --git a/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/Quicksort1.class b/Sorting/quickSort/out/production/quickSort/com/dataStructure/Sorting/quickSort/Quicksort1.class
new file mode 100644
index 0000000000000000000000000000000000000000..ead2a70057949060e8013a096d828dc6752be3b5
GIT binary patch
literal 1814
zc$}40O;aOP6g@BLPA8!u8JK`WLIxB@2uuQgFe4dJL2;tNXk`j3vYAKH1r14e>~v68
zZste0b{1~j;6kUSEPjCH!rx%|BP<s)p4UkQEYQ+a^4`7o-FNRf=e_Ry{Osu&fDL>Y
zM+jj9nh6~df#jh)mW8Ht_6wE0L#yr!MDE#+?XL@j=NES3h$3bnZej?gK)&v_3JvMY
zs_%8{e%G@KRoC-vZvVV%*N>D__(WM9S}OvvL0G_;-z}9&3p+84AYmYB;u=Q(2BCV=
z@vRm+yItm|%E5~57C!cD$7f4Rwu+<Vaot1;;{p>cd1P(6PF?z++WrBpjxQa*!@cvR
zh4O{MJ}c}O<9Go#3{09xBO@?&MSTIitvprYa)F*8Sra!gO>%8X?!N6h19By`{-TMO
zlv-Nn3)$wh={78ZMA>$%kGicr%X=XAnv9H=-MVb<NY7S&KdAW!HVG`3|DV)F?rce$
zNXF-PuL3S0Z2n5jliof%j9rmN>80lhgm#%XT=ixBXj`@eWCrpEmMIS<R;L-ZoQ4w1
zK6dGeLxGWj93`h=eW|EeE%J|7-L6-+wroW&aSl1J+VlK3T-WdTo@{Sh{(;-*M8V4!
z64QwY-j3rPY#7*72mY?W>^WlFId+e%KJeZh*phYM^-cu7zIb%~#9s0H(rGlU&TQFr
zkGk#RWd;6e<Aam7bw&C`4SNqzap7`_P1$T#ZQr84X323ZZ?h>o9jjyDeSx|E1l0gf
zB>V5Fe0F=unBgr9L49-x^`vv0rB~oAR5bS^#3_vs<~T-zU>LVJn!N<PjCsy6EFjn4
z{3|qO0x}u<DP9XFqm`PbS86)vNTgCTlCerHYE){;NK%bPlEGwDtCSbRi)UKn35><<
zrL*<$s+Q8GzCmUwrR7)k?=hUxpJEL70TYij@$K{9PXjOt*ksT!f@Sh~195EgHS`(h
zhZqjPPBU+t_9B)Dnb2?>dCtpNA=hOBU!gaF&~x4+-M}jbUgcMi;vdMe&``ivvHObb
zG|t&f`Z2WATsrdvQ|r0(RDe7;r9EW8IEOYKG)xlQC;?pO{Y+tstrV<WuTlU3f%O^z
zioklER){;UVU<=m02qdd5DZ@`eK5Z;q?oVeGWqqi)>zfjt9nY$XpP6n<WhQ``i)R5
znknrGW*+I(?Kc(31b#~UZU8jL%1TKM86IbrP;b(j<~YMc&Qh^C!n}n$Ja7emot;gt
z-RWz(HlVRKpt07cp^-$7MvO%6($WG#Cc@A71{7lQPu7U5*I}Poy)Sb@G0SCg>3oG6
zSI+O^Xt1mb-R8zT|0@a?G))Y^BmxK`u<rK34DpgEFku2z^@_O1Im)cJ_<IxY(TmgC
K!hL*z8-D>c-EnUK

diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/heapSort/Heap.class b/Sorting/out/production/Sorting/com/dataStructure/Sorting/heapSort/Heap.class
new file mode 100644
index 0000000000000000000000000000000000000000..37e05205441b9492cf789b1fea7556bf352f4cef
GIT binary patch
literal 1242
zc$|$=O-~b16g{t<p|lj}2MDDtilWddwg!z01*0)B)}T$S5|xEa+tH4e){Ij{*ZvC^
zCdR~#8xzFD1wX)F;16+S{5tn_EXI{>=DqvwefOMm?|q+te%b?Y0ViSzAsm4bhlwGD
z!~^?@U2fZ*`{io=fz$96hF08;>z`8yFBaCL7)CULSR5mWD=aj+Tji$h+cn?oHT<6E
zlxtnjcbVRD>_=jkFVkSM?Rg5Jjfx<Q#W9YAg7MgW?kK2AjLuXXX^{}E_uO_<vcx+X
z#{o<!L<G;h_l!x4mBPA&GI7ixD=1HeA+oqpsW7Bq(vsb{*liMie9i4R*LquZ$Gc(I
z+w`Q?x(&O%ZhNkr1E=A)+{X%qwg0T?EQPxYqcz`dJiKZ@3SeShx9i_^J56VswQSkj
ze{8eSVqHwK`PGHb*`n+bXWRGehJT%Dy2ll+Ok+X!9lxd<6svW6Uc<TM3PDuJOEM?S
zu?r#2Q9jNC@?&GU4uOQoan18|i#O!Xg!K{1Dt<u3D(-#2sI`mad!0Ya^#C&fz6F^v
z|Kr3=6ZN2u>3kd_C$uGeidI^42}>(r$yhrWHQPpWCHoR%R(2N?FVwHMzrG4pSW~4)
zB2q^wHpP9KFn?%-_%Qtfo(Tw#@QWh!9Z~fSWBTG$!1{$y0(LXInl)R-=DEDkzh<pF
zh~!JM=1Om1=2!E^W<NBoL&oMHD2G)`PTAZprn9+M7`A9l>?>Z@?G=4fY|k|HWvF<D
z>Sj@-wL+!maTHf@3{@=P1`4_&t1oWQxSN>QwS`dQ?F9E>TxCvzJpC%eKQO1%Y?=o?
z@1V*qVPrbVVy<-BDCUa!Qni?$G^+dK>-Tht*N$^IB_fu!f>Zs(fr8{<bV=$==#eF{
zs1=xu6lfV*c`+bwa>R0LUOE&mt>{e_>o)soH1F^!m8w>l4a>g!N6#`J)JdY8;!IEf
o^_1oVJrTy1f@vQgFqXNC$CQEXLk?-@84c4f!3<y&3zl2u-<U(TYXATM

diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/queue/PriorityQueue/PriorityQueue$Element.class b/Sorting/out/production/Sorting/com/dataStructure/Sorting/queue/PriorityQueue/PriorityQueue$Element.class
new file mode 100644
index 0000000000000000000000000000000000000000..0924aa14d32bce42cb626c87b08a8b54feb5a3e2
GIT binary patch
literal 645
zc$}?K%Syvg5Is|?X=D1ZzO_mhF4_v_11f?P#X|8xrQq^5Ui6kU(VH8=&vGGx3qQb*
z66eNl)TM6b%nUQ<%;Wvz^$oxwwq4{f;~?*07ITE^SUd<n6w!@;HX6&o5a#w(q|5<f
zrr8=6Q9#jw>tP-qp&P^#|5_L^FgguPs--`OwNc!DpUPDF=UT;Dna7LY(aupQCo-}M
z@l>kT|0&<Gf@KdCR0)N<X+ME_gq7y+@?L95$amvwNvQNyBu~@HNa{;53Z><b0}&2|
zRyLj{^X671grojH?9w5)gE-ZJJXV?Dx2iomF0XMa6LS(L#=$0`^9Nai*NY;lyP-%D
z$xArXIndy<<@m!nko^>UWN(-u@v9fu);PMd?`N#EUqJ2MXE^QpGfGcc>mu74@@z|N
s%P2BMnMsy7)A(w`GFE`hvoe%<R>;z>W-M!1&u{~EMwe>}>~F#S1g;;PfdBvi

diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/queue/PriorityQueue/PriorityQueue.class b/Sorting/out/production/Sorting/com/dataStructure/Sorting/queue/PriorityQueue/PriorityQueue.class
new file mode 100644
index 0000000000000000000000000000000000000000..430680bd92fa6bc771d9ace2823297c31ac26346
GIT binary patch
literal 2217
zc$}?OT~ixX7=8}f&62Q4ga$1kEwlxbO(89<QA>+O3N{s}n##!N1xvCeTa#?uY+CSR
zobkf`2WPB~<BT_6v@_5$I`RYjH{REe=WLchfxGr1XW#Sg`|-TbdCumqe}CTrFpb41
zIuO#J=ui<Bh}|*on%Rn3Tg%>Dy<-(Uf$(L!W_wctp;UTFL#Mz@(Wz!jre_vBw^{U>
zu9Yn~u4gmp^QP6bvhTaL<J#WF2ZwiOW-C_Js(BGa(WODx(T$e`CZD6EfG`E-KAC?3
zuqGw0n2wjxD-iM13icPWMLx<m$8^NeFA%Mo>(?!_Zr|PzP*eGQdMN@8uj)9C0aE4!
z-1W{M<a1J%8Pt)KZ1<I%=4!?A5zLr%vq(5m);TFpV@RMsbvU1`WQkKcPU8$))lHYU
z1(Z}iO^l;>O+!jY8pboHS=eZJR+TfEu4`@-ojQRVN0mRq6|_97V@$SGD%NdJI<h*>
zNr&p%Yh_OoFrnjuWUjLwkjv;9r$qjG=Ixrb*sQKv?k$ruOKzN^Sy?h&TkZp=;+5@&
zz?J7Y%So1L_=iTt=DDdmm5RWzRQm92jPabh!0ZbVk3e_9GmD=snDt<ukXb5`AiGww
z)`_HM-J7PCYyquex@%TL9vshw2s+EuQ=m1X6)sg)aGGw>nzMbno@qHQClTmcWQhe!
zvP#zUe641=GZnMZu(;I%SQv)9<>0SF-ZtN&!1;_o$a~NAB6oTE1)qJ!69^*~{S(?2
zB1UKnJ&*jP*SYpW;d-3w0E;EKA4HBGy_JeL@Ft%EZ{bo<Hp{1cry85+`K?_j>^o2H
zOIF*-leiotKcH7)pOwkqLlqBcL_!nu{zESEg;JU*?AfAVEc*t58#1QnG5Ru_c;z7r
zh5Y8H(8)DT$r>bK3^Ae{rkclao**vZDx)N@{#Nq<Sd88)m?E^d{YpaecNIec)*a3y
z$;r!>63)&~(2U1O>_Ynk+Hz*_2~Gq6SGN2(BHhODl#vXeCgm>q!+(E2YU3RxO0cWW
zb}`Hl|18epU1GdJ?>w$y0oQTU$85Af1em48kCIPtUfxbll;b%~(+c@>Xy}MN#fadG
zWLpa>0q;Zp9BP?bXi=W=N#EJVh>@W>4hrKIy0FA{AM<3F_fa?$!0F-#^c`xD>Xu)V
zpxe1Xd0};+tgIZ=$fx@>66Wwyxl#G)IU-v<l)Z9f_UXgf14>D)9Lz2qk=-Hx1X|hR
z5=qqPyPw!bW{S&rPDu{_j1!Wj<isY<OCuqTU+BoGzapH-sc~gDCa&xT#no1n7FQUc
zCVs@lc5W`*GWX)P+DY-SwBza^rL(7)9B(I3<}unNy@C-`k%5D8xOfi@YUM6I!adTn
z&fNyS!I$_BU;E>J$lH-(oogIdWyC1e*30oZW?NPFeKLe^&H1WQ@huf8Rn>*Bs75J>
qaf+Z-MJlZu%0I{m@f00mD96CO&*lvR0)zR<qLk(7NGnQ7NB;+q`l$r~

diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/queue/PriorityQueue/test/PriorityQueueTest.class b/Sorting/out/production/Sorting/com/dataStructure/Sorting/queue/PriorityQueue/test/PriorityQueueTest.class
new file mode 100644
index 0000000000000000000000000000000000000000..426f3cfbb7c2b5416c6e7cea222154cc517a652e
GIT binary patch
literal 1302
zc$}qEYflqF6g|@i+pY_g0tE!L_<*)N)+Z`OlOkX=6;QB=AD8X`L&|R1oi+NajEREL
z#Q51CWxPAxP@sGvX0vzBy*u~ZbMNf@`TOG+fC|bwVu))<7)YXvA+v9Nu*`<#?3(M_
z`@Ak0x)y~a<THkNp;*(9Vkp<$1JkyowJE)zE(4F7o31AXB^?Gl;O2%WTu;bPZ#q34
z8sceOfuW(>Ko5EumM_OAxi8O#wkX2T-8>y*cv}4ro#hnz7!t4CJtvghZ(sm}Gy}`F
z8FGc{`8kze7HcUCQOYv6RLY2fs~Dv~(`_^u1`5T_Bn{(dW==v$osR3sYnU)_12-A+
zuD5IM2XqKzn?iEWw3@=K_&%p*T*qfHEaj{m23CXIsSEUVMvAqt&}{>gm}1ad6l*~!
zcJKm%VvTxv?%Fij-l}l;T5zz<y)A3IL6L0Lty_(n<%!Ubf(f}NNX_ac&*9?pEi)v2
zF5fjt>dMDDZ>rWc++pZ%Yd!hGF!DBVq&VO;;R}*eaU54#(Y#3R$xN5{j_Yxv?+FW6
zY`fyv8|uhXJHqqjdLYAu^M^zUX`k0!$5tCs)T`HmnN#GEa(&YcygFYM;aGAVz0HN>
zn4nt`qg%<y(!C%QCrsCpY=JzJRz_>GbPV=|Knz8)T`HJHiLBAufN9JqqFMSHSIG;C
zjCPcMLVJIV^f%~j4qX-QB>|aJJVwMbM{j~6ChkV{?kV>Bgky^RGqERVeNp-fJ)21$
zA*)a>V?^)>!@n_BZNt}XxR%XKf5)|KZiejacid_Vo214-S5L<vJwwQ2m_&_W9-~;q
u7?v=ORr-rV(WRDzNOT@kcz}l_bDH+e6N-`T!y`iRlSUq^MxLm83;zJo(mX=|

diff --git a/Sorting/out/production/Sorting/com/dataStructure/Sorting/queue/PriorityQueue/Main.class b/Sorting/out/production/Sorting/com/dataStructure/Sorting/queue/PriorityQueue/Main.class
new file mode 100644
index 0000000000000000000000000000000000000000..1971efe9a9f42c33883d90d8a590113a25f1f73a
GIT binary patch
literal 1530
zc$}3~OH<QO6#g!hrj#J1P|8CT9dTMfqKKjvd4r-U4~s>>$AmUOux(067+Jb?>&|iO
zuyUab9y;T=_Ln&0A8^5l=O(SRfa93V<eYQQch5WL+pkYw01V=p7bPea;1W>=H-m3g
z*-)gEl3A7}7gyDU$>8qQGMd@PP#Oxy1$Y>OHpnuylr&{%x}lky)0S$fUU*R<Kon7l
zQw)Ja*sz{TkugortTTv)x}h5D>ZFlW4TkzqST01Svx=dZx)Je0fRD#j&Cn1!8554X
z2RyJJF9N6&5EN05hN4VHbZarCG6)+=%2FqnD74T>&S?Q4Qh_F%7SJr>49+rC9eT9W
zV<^*?mUzg4kbJaGk?_2Gz~w~Z9`NOu{-601hl0BZi)ceTg`=&HrnBazUD^3^TtcS+
zNyKGbDGEQfxo)ayLg^N@BjC8!bYA<688Z!4N!y`c7151r46ZCyo1r!oJ|3kPJ-8v@
zrifdJFw~r2ivr7XDV6z4qHzyyGq52K`iTsCFi2$3gJB|L9*hzh5pbtC2a`-LbMNEa
z^}Qpe9d(4ym(0+W(9=><F%>$t5~gLSQcO2YLP%@85yev{MHP)gbq(uDYEhM}Wz-2P
zy{H;9irsa;tS6LITro5*=MG)wibkW@E&snODw`{9yQ~W>oRkCU6=RvK*PNiHAzE{W
zsaifVU!-%}I=Wg{9Q0;3A9(B0TfN8UxG(Y#TrL)ltBjdS;(1ib=Inc8x@9EPF^vo5
zJl{@!59e^7HU)o5!1%79Z<Hj7C?i_dwgdLTR!{JOw-4Qzq_5}zFokKN<#>RYbD6E6
zlwM%>GlaQal<!dc+H2w8MeQCMOE619OQCSSP`FSiTs#!^5Mp=(|3`EX-^H+v>stpu
z4t+#B{Jjpg!{3)@2J*~Mo*Bt8IeP)J*J0cHim`3n-8%Tr^L5$zj-i^q9{Rt%w0<hk
zN?CW&8tlg@$nfDI>65gebOiB&5HHbyS7^j*`fuN&8SiN2?4ZT2SBp~<%+M{qG2SDN
tS*n<haXccf1aov=N7T{H|Isbb*<;fA;M#{QpeeYI9wLo|cw+bF>2J$^W=8-3

